/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.framework;

/**
 * @author Stubs generated by DesignDoc on Mon Sep 11 11:10:57 PDT 2000
 * @version $Id$
 */
public class XMLStringBuffer
    extends XMLString {

    //
    // Constants
    //

    /** SIZE */
    /** initial buffer size when constructed from the default constructor */
    public static final int SIZE = 16;

    //
    // Constructors
    //

    /**
     * 
     */
    public XMLStringBuffer() {
        ch = new char[SIZE];
        offset = 0;
        length = 0;
    }

    /**
     * 
     * 
     * @param size 
     */
    public XMLStringBuffer(int size) {
        ch = new char[size];
        offset = 0;
        length = 0;
    }

    //
    // Methods
    //

    /**
     * append
     * 
     * @param c 
     */
    public void append(char c) {
        if ( (length+1) > ch.length ) {
            char[] newArray = new char[ch.length+SIZE];
            System.arraycopy(ch, 0, newArray, 0, length);
            ch = newArray;
        }

        ch[length++] = c;
    } // append

    /**
     * append
     * 
     * @param s 
     */
    public void append(String s) {
        int len = s.length();
        if ( (length+len) > ch.length) {
            char[] newArray = new char[ch.length+len+SIZE];
            System.arraycopy(ch, 0, newArray, 0, length);
            ch = newArray;
        }

        for (int i=0; i<len; i++) {
            ch[length+i] = s.charAt(i);
        }
        length += len;
    } // append

    /**
     * append
     * 
     * @param ch 
     * @param offset 
     * @param length 
     */
    public void append(char[] ch, int offset, int length) {
        if ( (this.length+length) > ch.length) {
            char[] newArray = new char[ch.length+length+SIZE];
            System.arraycopy(this.ch, 0, newArray, 0, this.length);
            this.ch = newArray;
        }

        for (int i=0; i<length; i++) {
            this.ch[this.length+i] = ch[offset+i];
        }
        this.length += length;
    } // append

    /**
     * append
     * 
     * @param s 
     */
    public void append(XMLString s) {
        append(s.ch, s.offset, s.length);
    } // append

} // class XMLStringBuffer
