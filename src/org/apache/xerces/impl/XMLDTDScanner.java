/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.impl;

import java.io.IOException;
import java.io.EOFException;

import org.apache.xerces.impl.XMLEntityManager;
import org.apache.xerces.impl.XMLErrorReporter;
import org.apache.xerces.impl.msg.XMLMessageFormatter;
import org.apache.xerces.impl.validation.GrammarPool;

import org.apache.xerces.util.XMLChar;
import org.apache.xerces.util.SymbolTable;

import org.apache.xerces.xni.XMLComponent;
import org.apache.xerces.xni.XMLComponentManager;
import org.apache.xerces.xni.XMLDTDContentModelHandler;
import org.apache.xerces.xni.XMLDTDContentModelSource;
import org.apache.xerces.xni.XMLDTDHandler;
import org.apache.xerces.xni.XMLDTDSource;
import org.apache.xerces.xni.XMLString;

import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;

/**
 * @author Stubs generated by DesignDoc on Mon Sep 11 11:10:57 PDT 2000
 * @author Arnaud  Le Hors, IBM
 * @author Andy Clark, IBM
 * @author Glenn Marcy, IBM
 *
 * @version $Id$
 */
public class XMLDTDScanner
    extends XMLScanner
    implements XMLComponent, 
               XMLDTDSource, XMLDTDContentModelSource, XMLEntityHandler {

    //
    // Constants
    //

    // scanner states

    protected static final int SCANNER_STATE_END_OF_INPUT = 0;
    protected static final int SCANNER_STATE_TEXT_DECL = 1;
    protected static final int SCANNER_STATE_MARKUP_DECL = 2;
    protected static final int SCANNER_STATE_COMMENT = 3;
    protected static final int SCANNER_STATE_PI = 4;
    protected static final int SCANNER_STATE_ELEMENT_DECL = 5;
    protected static final int SCANNER_STATE_ATTLIST_DECL = 6;
    protected static final int SCANNER_STATE_NOTATION_DECL = 7;
    protected static final int SCANNER_STATE_ENTITY_DECL = 8;
    protected static final int SCANNER_STATE_CONDITIONAL_SECT = 9;

    // debugging

    /** Debug scanner state. */
    private static final boolean DEBUG_SCANNER_STATE = false;

    //
    // Data
    //

    /** fErrorReporter */
    protected XMLErrorReporter fErrorReporter;

    /** fGrammarPool */
    protected GrammarPool fGrammarPool;

    /** fDTDHandler */
    protected XMLDTDHandler fDTDHandler;

    /** fDTDContentModelHandler */
    protected XMLDTDContentModelHandler fDTDContentModelHandler;

    /** Scanner state. */
    protected int fScannerState;

    // private data

    private boolean fStartDTDCalled;
    private boolean fScanningExtSubset;

    private String[] fPseudoAttributeValues = new String[3];

    private int[] fOpStack = new int[5];
    private int fDepth;

    private int fIncludeSectDepth;

    private XMLString fDefaultValue = new XMLString();
    private String[] fEnumeration = new String[5];
    private int fEnumerationCount;

    // symbols

    private String fXmlSymbol;
    private String fXmlSpace;
    private String fDefault;
    private String fPreserve;

    //
    // Constructors
    //

    /**
     * 
     */
    public XMLDTDScanner() {
    }

    //
    // Methods
    //

    /**
     * scanDTD
     * 
     * @param complete 
     * 
     * @return 
     */
    public boolean scanDTD(boolean complete)
        throws IOException, SAXException {

        fScanningExtSubset = true;

        // set starting state
        setScannerState(SCANNER_STATE_TEXT_DECL);

        scanTextDecl(complete);

        // next state is markup decls regardless of whether there
        // is a TextDecl or not
        setScannerState(SCANNER_STATE_MARKUP_DECL);

        // keep dispatching "events"
        while (complete) {
            if (!scanDecls(complete)) {
                return false;
            }
        }

        // return that there is more to scan
        return true;

    } // scanDTD

    /**
     * scanDTDFragment
     * 
     * @param complete 
     * 
     * @return 
     */
    public boolean scanDTDFragment(boolean complete)
        throws IOException, SAXException {

        // set starting state
        setScannerState(SCANNER_STATE_TEXT_DECL);

        scanTextDecl(complete);

        // next state is markup decls regardless of whether there
        // is a TextDecl or not
        setScannerState(SCANNER_STATE_MARKUP_DECL);

        // keep dispatching "events"
        do {
            if (!scanDecls(complete)) {
                return false;
            }
        } while (complete);

        // return that there is more to scan
        return true;

    } // scanDTDFragment

    /**
     * scanDTDInternalSubset
     * 
     * @param complete 
     * 
     * @return 
     */
    public boolean scanDTDInternalSubset(boolean complete, boolean standalone,
                                         boolean hasExtDTD)
        throws IOException, SAXException {

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.startDTD();
            fStartDTDCalled = true;
        }
        fScanningExtSubset = false;

        // set starting state
        setScannerState(SCANNER_STATE_MARKUP_DECL);

        // keep dispatching "events"
        boolean done = false;
        do {
            if (!scanDecls(complete)) {
                done = true;
                break;
            }
        } while (complete);

        // REVISIT: fix this for the case when it's not complete
        // call handler
        if (fDTDHandler != null && hasExtDTD == false) {
            fDTDHandler.endDTD();
        }

        // return that there is more to scan
        return done;

    } // scanDTDInternalSubset

    //
    // XMLComponent methods
    //

    /**
     * reset
     * 
     * @param componentManager 
     */
    public void reset(XMLComponentManager componentManager)
        throws SAXException {

        super.reset(componentManager);

        // Xerces properties
        fGrammarPool = (GrammarPool)
            componentManager.getProperty(Constants.XERCES_PROPERTY_PREFIX
                                         + Constants.GRAMMAR_POOL_PROPERTY);
        fErrorReporter = (XMLErrorReporter)
            componentManager.getProperty(Constants.XERCES_PROPERTY_PREFIX
                                         + Constants.ERROR_REPORTER_PROPERTY);

        // reset state related data
        fScanningExtSubset = false;
        fStartDTDCalled = false;
        fIncludeSectDepth = 0;

        // save built-in symbols
        fXmlSymbol = fSymbolTable.addSymbol("xml");
        fXmlSpace = fSymbolTable.addSymbol("xml:space");
        fDefault = fSymbolTable.addSymbol("default");
        fPreserve = fSymbolTable.addSymbol("preserve");

    } // reset

    /**
     * setFeature
     * 
     * @param featureId 
     * @param state 
     */
    public void setFeature(String featureId, boolean state)
        throws SAXNotRecognizedException, SAXNotSupportedException {

    } // setFeature

    /**
     * setProperty
     * 
     * @param propertyId 
     * @param value 
     */
    public void setProperty(String propertyId, Object value)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        
        super.setProperty(propertyId, value);

        // Xerces properties
        if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {
            String property =
               propertyId.substring(Constants.XERCES_PROPERTY_PREFIX.length());
            if (property.equals(Constants.GRAMMAR_POOL_PROPERTY)) {
                fGrammarPool = (GrammarPool)value;
            }
            return;
        }

    } // setProperty

    //
    // XMLDTDSource methods
    //

    /**
     * setDTDHandler
     * 
     * @param dtdHandler 
     */
    public void setDTDHandler(XMLDTDHandler dtdHandler) {
        fDTDHandler = dtdHandler;
    } // setDTDHandler

    //
    // XMLDTDContentModelSource methods
    //

    /**
     * setDTDContentModelHandler
     * 
     * @param dtdContentModelHandler 
     */
    public void setDTDContentModelHandler(XMLDTDContentModelHandler
                                          dtdContentModelHandler) {
        fDTDContentModelHandler = dtdContentModelHandler;
    } // setDTDContentModelHandler

    //
    // XMLEntityHandler methods
    //

    /**
     * startEntity
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     * @param encoding
     */
    public void startEntity(String name, String publicId, String systemId,
                            String encoding) throws SAXException {

        if (name.equals("[dtd]")) {
            // call handler
            if (fDTDHandler != null && fStartDTDCalled == false) {
                fDTDHandler.startDTD();
            }
        }

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.startEntity(name, publicId, systemId, encoding);
        }
    } // startEntity(String,String,String,String)

    /**
     * endEntity
     * 
     * @param name 
     */
    public void endEntity(String name)
        throws SAXException {

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.endEntity(name);
        }

        if (name.equals("[dtd]")) {
            fScannerState = SCANNER_STATE_END_OF_INPUT;
            // call handler
            if (fDTDHandler != null) {
                fDTDHandler.endDTD();
            }
        }

    } // endEntity(String)

    // helper methods

    /**
     * Sets the scanner state.
     *
     * @param state The new scanner state.
     */
    protected final void setScannerState(int state) {

        fScannerState = state;
        if (DEBUG_SCANNER_STATE) {
            System.out.print("### setScannerState: ");
            System.out.print(getScannerStateName(state));
            System.out.println();
        }

    } // setScannerState(int)

    //
    // Private methods
    //

    /** Returns the scanner state name. */
    private static String getScannerStateName(int state) {

        if (DEBUG_SCANNER_STATE) {
            switch (state) {
                case SCANNER_STATE_TEXT_DECL: return "SCANNER_STATE_TEXT_DECL";
            }
        }

        return "??? ("+state+')';

    } // getScannerStateName(int):String

    /** 
     * Dispatch an XML "event".
     *
     * @param complete True if this method is intended to scan
     *                 and dispatch as much as possible.                 
     *
     * @returns True if there is more to dispatch either from this 
     *          or a another dispatcher.
     *
     * @throws IOException  Thrown on i/o error.
     * @throws SAXException Thrown on parse error.
     *
     * @author Andy Clark, IBM
     * @author Arnaud  Le Hors, IBM
     */
    protected final boolean scanTextDecl(boolean complete) 
        throws IOException, SAXException {

        // scan XMLDecl
        if (fEntityScanner.skipString("<?xml")) {
            // NOTE: special case where document starts with a PI
            //       whose name starts with "xml" (e.g. "xmlfoo")
            if (XMLChar.isName(fEntityScanner.peekChar())) {
                fStringBuffer.clear();
                fStringBuffer.append("xml");
                while (XMLChar.isName(fEntityScanner.peekChar())) {
                    fStringBuffer.append((char)fEntityScanner.scanChar());
                }
                String target =
                    fSymbolTable.addSymbol(fStringBuffer.ch,
                                           fStringBuffer.offset,
                                           fStringBuffer.length);
                scanPIData(target, fString);
            }

            // standard Text declaration
            else {
                scanXMLDeclOrTextDecl(true, fPseudoAttributeValues);
            }
            return complete;
        }

        // if no TextDecl, then scan piece of decls
        return true;

    } // scanTextDecl(boolean):boolean

    /**
     * Scans a processing data. This is needed to handle the situation
     * where a document starts with a processing instruction whose 
     * target name <em>starts with</em> "xml". (e.g. xmlfoo)
     *
     * @param target The PI target
     * @param data The string to fill in with the data
     */
    protected final void scanPIData(String target, XMLString data) 
        throws IOException, SAXException {

        super.scanPIData(target, data);

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.processingInstruction(target, data);
        }

    } // scanPIData(String)

    /**
     * Scans a comment.
     * <p>
     * <pre>
     * [15] Comment ::= '&lt!--' ((Char - '-') | ('-' (Char - '-')))* '-->'
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!--'
     */
    protected final void scanComment() throws IOException, SAXException {

        scanComment(fStringBuffer);

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.comment(fStringBuffer);
        }

    } // scanComment()

    /**
     * Scans an element declaration
     * <p>
     * <pre>
     * [45]    elementdecl    ::=    '<!ELEMENT' S Name S contentspec S? '>'
     * [46]    contentspec    ::=    'EMPTY' | 'ANY' | Mixed | children  
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!ELEMENT'
     */
    protected final void scanElementDecl() throws IOException, SAXException {

        // spaces
        if (!checkForPEReference(true)) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_BEFORE_ELEMENT_NAME_IN_ELEMENTDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // element name
        String name = fEntityScanner.scanName();
        if (name == null) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_ELEMENT_NAME_REQUIRED",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // spaces
        if (!checkForPEReference(true)) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_AFTER_ELEMENT_NAME_IN_ELEMENTDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // content model
        String contentModel = null;
        if (fEntityScanner.skipString("EMPTY")) {
            contentModel = "EMPTY";
            // call handler
            if (fDTDContentModelHandler != null) {
                fDTDContentModelHandler.startContentModel(name,
                                         XMLDTDContentModelHandler.TYPE_EMPTY);
            }
        }
        else if (fEntityScanner.skipString("ANY")) {
            contentModel = "ANY";
            // call handler
            if (fDTDContentModelHandler != null) {
                fDTDContentModelHandler.startContentModel(name,
                                         XMLDTDContentModelHandler.TYPE_ANY);
            }
        }
        else {
            if (!fEntityScanner.skipChar('(')) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "OpenParenthesisRequiredInContentModel",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fStringBuffer.clear();
            fStringBuffer.append('(');
            checkForPEReference(false);

            // Mixed content model
            if (fEntityScanner.skipString("#PCDATA")) {
                // call handler
                if (fDTDContentModelHandler != null) {
                    fDTDContentModelHandler.startContentModel(name,
                                         XMLDTDContentModelHandler.TYPE_MIXED);
                }
                scanMixed();
            }
            else {              // children content
                // call handler
                if (fDTDContentModelHandler != null) {
                    fDTDContentModelHandler.startContentModel(name,
                                      XMLDTDContentModelHandler.TYPE_CHILDREN);
                }
                scanChildren();
            }
            contentModel = fStringBuffer.toString();
        }

        // call handler
        if (fDTDContentModelHandler != null) {
            fDTDContentModelHandler.endContentModel();
        }

        checkForPEReference(false);
        // end
        if (!fEntityScanner.skipChar('>')) {
            System.out.println("*** char: '"+(char)fEntityScanner.peekChar()+'\'');
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "ElementdeclUnterminated",
                                       new Object[]{name},
                                       XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.elementDecl(name, contentModel);
        }

    } // scanElementDecl()

    /**
     * scan Mixed content model
     * This assumes the content model has been parsed up to #PCDATA and
     * can simply append to fStringBuffer.
     * <pre>
     * [51]    Mixed    ::=    '(' S? '#PCDATA' (S? '|' S? Name)* S? ')*'  
     *                       | '(' S? '#PCDATA' S? ')'  
     * </pre>
     */
    private final void scanMixed() throws IOException, SAXException {

        fStringBuffer.append("#PCDATA");
        checkForPEReference(false);
        while (fEntityScanner.skipChar('|')) {
            fStringBuffer.append('|');
            checkForPEReference(false);

            String childName = fEntityScanner.scanName();
            if (childName == null) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_ELEMENT_NAME_REQUIRED",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fStringBuffer.append(childName);
            // call handler
            if (fDTDContentModelHandler != null) {
                fDTDContentModelHandler.mixedElement(childName);
            }
            checkForPEReference(false);
        }
        if (!fEntityScanner.skipChar(')')) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "CloseParenthesisRequiredInContentModel",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }
        fStringBuffer.append(')');
        // occurence operator
        if (fEntityScanner.skipChar('*')) {
            fStringBuffer.append('*');
        }
        // we are done
    }

    /**
     * scan children content model
     * This assumes it can simply append to fStringBuffer.
     * <pre>
     * [47]    children  ::=    (choice | seq) ('?' | '*' | '+')? 
     * [48]    cp        ::=    (Name | choice | seq) ('?' | '*' | '+')? 
     * [49]    choice    ::=    '(' S? cp ( S? '|' S? cp )+ S? ')'
     * [50]    seq       ::=    '(' S? cp ( S? ',' S? cp )* S? ')' 
     * </pre>
     */
    private final void scanChildren() throws IOException, SAXException {
        // call handler
        if (fDTDContentModelHandler != null) {
            fDTDContentModelHandler.childrenStartGroup();
        }
        fDepth = 0;
        int currentOp = 0;
        int c;
        do {
            c = fEntityScanner.peekChar();
            if (c == '(') {
                // call handler
                if (fDTDContentModelHandler != null) {
                    fDTDContentModelHandler.childrenStartGroup();
                }
                fEntityScanner.scanChar();
                fStringBuffer.append('(');
                // push current op on stack and reset it
                pushOpStack(currentOp);
                currentOp = 0;
                fDepth++;
            }
            else if (c == ')') {
                // call handler
                if (fDTDContentModelHandler != null) {
                    fDTDContentModelHandler.childrenEndGroup();
                }
                fEntityScanner.scanChar();
                fStringBuffer.append(')');
                // restore previous op
                currentOp = popOpStack();
                fDepth--;
            }
            else if (c == ',') {
                if (currentOp == 0) {
                    currentOp = c;
                }
                else if (c != currentOp) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_UNTERMINATED_CHOICE",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                // call handler
                if (fDTDContentModelHandler != null) {
                    fDTDContentModelHandler.childrenSeparator(
                                 XMLDTDContentModelHandler.SEPARATOR_SEQUENCE);
                }
                fEntityScanner.scanChar();
                fStringBuffer.append(',');
            }
            else if (c == '|') {
                if (currentOp == 0) {
                    currentOp = c;
                }
                else if (c != currentOp) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_UNTERMINATED_SEQ",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                // call handler
                if (fDTDContentModelHandler != null) {
                    fDTDContentModelHandler.childrenSeparator(
                                 XMLDTDContentModelHandler.SEPARATOR_CHOICE);
                }
                fEntityScanner.scanChar();
                fStringBuffer.append('|');
            }
            else if (c == '?' || c == '*' || c == '+') {
                // call handler
                if (fDTDContentModelHandler != null) {
                    short oc;
                    if (c == '?') {
                        oc = XMLDTDContentModelHandler.OCCURS_ZERO_OR_ONE;
                    }
                    else if (c == '*') {
                        oc = XMLDTDContentModelHandler.OCCURS_ZERO_OR_MORE;
                    }
                    else {
                        oc = XMLDTDContentModelHandler.OCCURS_ONE_OR_MORE;
                    }
                    fDTDContentModelHandler.childrenOccurrence(oc);
                }
                fEntityScanner.scanChar();
                fStringBuffer.append((char)c);
            }
            else {
                String childName = fEntityScanner.scanName();
                if (childName == null) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_ELEMENT_NAME_REQUIRED",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                // call handler
                if (fDTDContentModelHandler != null) {
                    fDTDContentModelHandler.childrenElement(childName);
                }
                fStringBuffer.append(childName);
            }
            checkForPEReference(false);
        } while (fDepth >= 0);

        // occurence operator
        c = fEntityScanner.peekChar();
        if (c == '?' || c == '*' || c == '+') {
            // call handler
            if (fDTDContentModelHandler != null) {
                short oc;
                if (c == '?') {
                    oc = XMLDTDContentModelHandler.OCCURS_ZERO_OR_ONE;
                }
                else if (c == '*') {
                    oc = XMLDTDContentModelHandler.OCCURS_ZERO_OR_MORE;
                }
                else {
                    oc = XMLDTDContentModelHandler.OCCURS_ONE_OR_MORE;
                }
                fDTDContentModelHandler.childrenOccurrence(oc);
            }
            fEntityScanner.scanChar();
            fStringBuffer.append((char)c);
        }
        // we are done
    }

    /**
     * Scans an attlist declaration
     * <p>
     * <pre>
     * [52]  AttlistDecl    ::=   '<!ATTLIST' S Name AttDef* S? '>' 
     * [53]  AttDef         ::=   S Name S AttType S DefaultDecl 
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!ATTLIST'
     */
    protected final void scanAttlistDecl() throws IOException, SAXException {

        // spaces
        if (!checkForPEReference(true)) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_BEFORE_ATTRIBUTE_NAME_IN_ATTRDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // element name
        String elName = fEntityScanner.scanName();
        if (elName == null) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_ELEMENT_NAME_REQUIRED",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.startAttlist(elName);
        }

        // spaces
        if (!checkForPEReference(true)) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_AFTER_ELEMENT_NAME_IN_ATTRDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // definitions
        do {
            String name = fEntityScanner.scanName();
            if (name == null) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_ATTRIBUTE_NAME_REQUIRED",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            // spaces
            if (!checkForPEReference(true)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_AFTER_ATTRIBUTE_NAME_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            // type
            String type = scanAttType();

            // spaces
            if (!checkForPEReference(true)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_AFTER_ATTRIBUTE_TYPE_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }

            // default decl
            String defaultType = scanAttDefaultDecl(name, fDefaultValue);

            // call handler
            if (fDTDHandler != null) {
                String[] enum = null;
                if (fEnumerationCount != 0) {
                    enum = new String[fEnumerationCount];
                    System.arraycopy(fEnumeration, 0, enum,
                                     0, fEnumerationCount);
                }
                fDTDHandler.attributeDecl(elName, name, type, enum,
                                          defaultType, fDefaultValue);
            }
            checkForPEReference(false);
            // is it the end?
            if (fEntityScanner.skipChar('>')) {
                // call handler
                if (fDTDHandler != null) {
                    fDTDHandler.endAttlist();
                }
                return;
            }

        } while(true);

    } // scanAttlistDecl()

    /**
     * Scans an attribute type definition
     * <p>
     * <pre>
     * [54]  AttType        ::=   StringType | TokenizedType | EnumeratedType  
     * [55]  StringType     ::=   'CDATA' 
     * [56]  TokenizedType  ::=   'ID'
     *                          | 'IDREF'
     *                          | 'IDREFS'
     *                          | 'ENTITY'
     *                          | 'ENTITIES'
     *                          | 'NMTOKEN'
     *                          | 'NMTOKENS'
     * [57]  EnumeratedType ::=    NotationType | Enumeration  
     * [58]  NotationType ::= 'NOTATION' S '(' S? Name (S? '|' S? Name)* S? ')'
     * [59]  Enumeration    ::=    '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')' 
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!ATTLIST'
     */
    private final String scanAttType() throws IOException, SAXException {

        String type = null;
        fEnumerationCount = 0;
        /*
         * Watchout: the order here is important: when a string happens to
         * be a substring of another string, the longer one needs to be
         * looked for first!!
         */
        if (fEntityScanner.skipString("CDATA")) {
            type = "CDATA";
        }
        else if (fEntityScanner.skipString("IDREFS")) {
            type = "IDREFS";
        }
        else if (fEntityScanner.skipString("IDREF")) {
            type = "IDREF";
        }
        else if (fEntityScanner.skipString("ID")) {
            type = "ID";
        }
        else if (fEntityScanner.skipString("ENTITY")) {
            type = "ENTITY";
        }
        else if (fEntityScanner.skipString("ENTITIES")) {
            type = "ENTITIES";
        }
        else if (fEntityScanner.skipString("NMTOKENS")) {
            type = "NMTOKENS";
        }
        else if (fEntityScanner.skipString("NMTOKEN")) {
            type = "NMTOKEN";
        }
        else if (fEntityScanner.skipString("NOTATION")) {
            type = "NOTATION";
            // spaces
            if (!checkForPEReference(true)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_AFTER_ATTRIBUTE_NAME_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            // open paren
            int c = fEntityScanner.scanChar();
            if (c != '(') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "OPEN_PAREN_REQUIRED_AFTER_NOTAITON_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            do {
                String aName = fEntityScanner.scanName();
                if (aName == null) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                   "MSG_SPACE_REQUIRED_AFTER_NOTAITON_IN_ATTRDECL",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                ensureEnumerationSize(fEnumerationCount + 1);
                fEnumeration[fEnumerationCount++] = aName;
                checkForPEReference(false);
                c = fEntityScanner.scanChar();
            } while (c == '|');
            if (c != ')') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "CLOSE_PAREN_REQUIRED_AFTER_NOTAITON_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
        }
        else {              // Enumeration
            type = "ENUMERATION";
            // open paren
            int c = fEntityScanner.scanChar();
            if (c != '(') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "OPEN_PAREN_REQUIRED_BEFORE_ENUMERATION_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            do {
                String token = fEntityScanner.scanNmtoken();
                if (token == null) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "NMTOKEN_REQUIRED_IN_ENUMERATION_IN_ATTRDECL",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                ensureEnumerationSize(fEnumerationCount + 1);
                fEnumeration[fEnumerationCount++] = token;
                checkForPEReference(false);
                c = fEntityScanner.scanChar();
            } while (c == '|');
            if (c != ')') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "CLOSE_PAREN_REQUIRED_AFTER_ENUMERATION_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
        }
        return type;

    } // scanAttType():String


    /**
     * Scans an attribute default declaration
     * <p>
     * <pre>
     * [60] DefaultDecl ::= '#REQUIRED' | '#IMPLIED' | (('#FIXED' S)? AttValue)
     * </pre>
     *
     * @param name The name of the attribute being scanned.
     * @param defaultVal The string to fill in with the default value.
     */
    protected final String scanAttDefaultDecl(String name,
                                              XMLString defaultVal)
        throws IOException, SAXException {

        String defaultType = null;
        fString.clear();
        if (fEntityScanner.skipString("#REQUIRED")) {
            defaultType = "#REQUIRED";
        }
        else if (fEntityScanner.skipString("#IMPLIED")) {
            defaultType = "#IMPLIED";
        }
        else {
            if (fEntityScanner.skipString("#FIXED")) {
                defaultType = "#FIXED";
                // spaces
                if (!checkForPEReference(true)) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_SPACE_REQUIRED_AFTER_ATTRIBUTE_DEFAULT_IN_ATTRDECL",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
            }
            // AttValue
            // REVISIT: Do it right
            int quote = fEntityScanner.scanChar();
            if (quote != '\'' && quote != '"') {
                fErrorReporter.reportError( XMLMessageFormatter.XML_DOMAIN, "QuoteRequiredInDecl", 
                                            new Object[]{name}, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            // REVISIT: fix this
            XMLString value = fString;
            if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                fStringBuffer.clear();
                do {
                    fStringBuffer.append(fString);
                } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                fStringBuffer.append(fString);
                value = fStringBuffer;
            }
            if (!fEntityScanner.skipChar(quote)) {
                fErrorReporter.reportError( XMLMessageFormatter.XML_DOMAIN, "CloseQuoteMissingInDecl", 
                                            new Object[]{name}, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            defaultVal.setValues(value);
        }
        return defaultType;

    } // ScanAttDefaultDecl

    /**
     * Scans an entity declaration
     * <p>
     * <pre>
     * [70]    EntityDecl  ::=    GEDecl | PEDecl 
     * [71]    GEDecl      ::=    '<!ENTITY' S Name S EntityDef S? '>' 
     * [72]    PEDecl      ::=    '<!ENTITY' S '%' S Name S PEDef S? '>' 
     * [73]    EntityDef   ::=    EntityValue | (ExternalID NDataDecl?) 
     * [74]    PEDef       ::=    EntityValue | ExternalID 
     * [75]    ExternalID  ::=    'SYSTEM' S SystemLiteral 
     *                          | 'PUBLIC' S PubidLiteral S SystemLiteral  
     * [76]    NDataDecl   ::=    S 'NDATA' S Name 
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!ENTITY'
     */
    private final void scanEntityDecl() throws IOException, SAXException {

        // REVISIT: need to support PEREFs here!
        // spaces
        if (!fEntityScanner.skipSpaces()) {
            // REVISIT: report error
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_ENTITYDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // name
        String name = null;
        boolean parameter = false;
        if (fEntityScanner.skipChar('%')) {
            if (!checkForPEReference(true)) {
                // REVISIT: report error
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_ENTITYDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            parameter = true;
        }
        name = fEntityScanner.scanName();
        if (name == null) {
            // REVISIT: report error
            throw new SAXException("expected entity name");
        }
        if (parameter) {
            name = "%" + name;
        }

        // spaces
        if (!checkForPEReference(true)) {
            // REVISIT: report error
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_AFTER_ENTITY_NAME_IN_ENTITYDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // public id
        String publicId = null;
        if (fEntityScanner.skipString("PUBLIC")) {
            // spaces
            if (!checkForPEReference(true)) {
                // REVISIT: report error
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_BEFORE_PUBLICID_IN_ENTITYDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            int quote = fEntityScanner.peekChar();
            if (quote != '\'' && quote != '"') {
                // REVISIT: report error
                throw new SAXException("expected open quote");
            }
            fEntityScanner.scanChar();
            // REVISIT: do right
            XMLString value = fString;
            if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                fStringBuffer.clear();
                do {
                    fStringBuffer.append(fString);
                } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                fStringBuffer.append(fString);
                value = fStringBuffer;
            }
            publicId = value.toString();
            if (!fEntityScanner.skipChar(quote)) {
                // REVISIT: report error
                throw new SAXException("expected close quote");
            }
        }

        // system id
        String systemId = null;
        if (publicId != null || fEntityScanner.skipString("SYSTEM")) {
            // spaces
            if (!checkForPEReference(true)) {
                // REVISIT: report error
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_BEFORE_SYSTEMID_IN_ENTITYDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            int quote = fEntityScanner.peekChar();
            if (quote != '\'' && quote != '"') {
                // REVISIT: report error
                throw new SAXException("expected open quote");
            }
            fEntityScanner.scanChar();
            // REVISIT: do right
            XMLString value = fString;
            if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                fStringBuffer.clear();
                do {
                    fStringBuffer.append(fString);
                } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                fStringBuffer.append(fString);
                value = fStringBuffer;
            }
            systemId = value.toString();
            if (!fEntityScanner.skipChar(quote)) {
                // REVISIT: report error
                throw new SAXException("expected close quote");
            }
        }

        // NDATA
        String notation = null;
        if (systemId != null && !parameter && fEntityScanner.skipString("NDATA")) {
            // spaces
            if (!checkForPEReference(true)) {
                // REVISIT: report error
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_AFTER_NDATA_IN_ENTITYDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            notation = fEntityScanner.scanName();
            if (notation == null) {
                // REVISIT: report error
                throw new SAXException("expected notation name");
            }
        }

        // internal entity
        String text = null;
        if (systemId == null) {
            int quote = fEntityScanner.peekChar();
            if (quote != '\'' && quote != '"') {
                // REVISIT: report error
                throw new SAXException("expected open quote for internal entity");
            }
            fEntityScanner.scanChar();
            // REVISIT: do right
            XMLString value = fString;
            if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                fStringBuffer.clear();
                do {
                    fStringBuffer.append(fString);
                } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                fStringBuffer.append(fString);
                value = fStringBuffer;
            }
            text = value.toString();
            if (!fEntityScanner.skipChar(quote)) {
                // REVISIT: report error
                throw new SAXException("expected close quote for internal entity");
            }
        }

        // skip possible trailing space
        checkForPEReference(false);

        // end
        if (!fEntityScanner.skipChar('>')) {
            // REVISIT: report error
            throw new SAXException("expected close entity decl");
        }

        // register entity and make callback
        if (systemId != null) {
            if (!fEntityManager.isEntityDeclared(name)) {
                if (notation != null) {
                    fEntityManager.addUnparsedEntity(name, publicId, systemId, notation);
                }
                else {
                    fEntityManager.addExternalEntity(name, publicId, systemId, null);
                }
            }
            if (fDTDHandler != null) {
                if (notation != null) {
                    fDTDHandler.unparsedEntityDecl(name, publicId, systemId, notation);
                }
                else {
                    fDTDHandler.externalEntityDecl(name, publicId, systemId);
                }
            }
        }
        else {
            if (!fEntityManager.isEntityDeclared(name)) {
                fEntityManager.addInternalEntity(name, text);
            }
            if (fDTDHandler != null) {
                // REVISIT: Change API for internal entity
                fStringBuffer.clear();
                fStringBuffer.append(text);
                fDTDHandler.internalEntityDecl(name, fStringBuffer);
            }
        }

    } // scanEntityDecl()

    /**
     * Scans a notation declaration
     * <p>
     * <pre>
     * [82] NotationDecl ::= '<!NOTATION' S Name S (ExternalID|PublicID) S? '>'
     * [83]  PublicID    ::= 'PUBLIC' S PubidLiteral  
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!NOTATION'
     */
    private final void scanNotationDecl() throws IOException, SAXException {

        // spaces
        if (!checkForPEReference(true)) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_NOTATIONDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // notation name
        String name = fEntityScanner.scanName();
        if (name == null) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_NOTATION_NAME_REQUIRED",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // spaces
        if (!checkForPEReference(true)) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_AFTER_NOTATION_NAME_IN_NOTATIONDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // external id
        String systemId = null;
        String publicId = null;
        if (fEntityScanner.skipString("SYSTEM")) {
            if (!checkForPEReference(true)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "SpaceRequiredAfterSYSTEM",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            int quote = fEntityScanner.peekChar();
            if (quote != '\'' && quote != '"') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "QuoteRequiredInSystemID",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fEntityScanner.scanChar();
            // REVISIT: do right
            XMLString value = fString;
            if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                fStringBuffer.clear();
                do {
                    fStringBuffer.append(fString);
                } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                fStringBuffer.append(fString);
                value = fStringBuffer;
            }
            systemId = value.toString();
            if (!fEntityScanner.skipChar(quote)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "SystemIDUnterminated",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
        }
        else if (fEntityScanner.skipString("PUBLIC")) {
            if (!checkForPEReference(true)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "SpaceRequiredAfterPUBLIC",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            int quote = fEntityScanner.peekChar();
            if (quote != '\'' && quote != '"') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "QuoteRequiredInPublicID",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fEntityScanner.scanChar();
            // REVISIT: do right
            XMLString value = fString;
            if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                fStringBuffer.clear();
                do {
                    fStringBuffer.append(fString);
                } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                fStringBuffer.append(fString);
                value = fStringBuffer;
            }
            publicId = value.toString();
            if (!fEntityScanner.skipChar(quote)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "PublicIDUnterminated",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }

            // skip possible space
            checkForPEReference(false);

            // do we have a system id as well?
            int c = fEntityScanner.peekChar();
            if (c != '>') {
                if (c != '\'' && c != '"') {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "QuoteRequiredInSystemID",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                fEntityScanner.scanChar();
                // REVISIT: do right
                value = fString;
                if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                    fStringBuffer.clear();
                    do {
                        fStringBuffer.append(fString);
                    } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                    fStringBuffer.append(fString);
                    value = fStringBuffer;
                }
                systemId = value.toString();
                if (!fEntityScanner.skipChar(quote)) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "SystemIDUnterminated",
                                               null, 
                                               XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
            }
        }

        // skip possible trailing space
        checkForPEReference(false);

        // end
        if (!fEntityScanner.skipChar('>')) {
            System.out.println("*** char: '"+(char)fEntityScanner.peekChar()+'\'');
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "NotationdeclUnterminated",
                                       new Object[]{name},
                                       XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.notationDecl(name, publicId, systemId);
        }

    } // scanNotationDecl()

    /**
     * Partially scans a conditional section
     * <p>
     * <pre>
     * [61] conditionalSect   ::= includeSect | ignoreSect  
     * [62] includeSect       ::= '<![' S? 'INCLUDE' S? '[' extSubsetDecl ']]>'
     * [63] ignoreSect   ::= '<![' S? 'IGNORE' S? '[' ignoreSectContents* ']]>'
     * [64] ignoreSectContents ::= Ignore ('<![' ignoreSectContents ']]>' Ignore)* 
     * [65] Ignore            ::=    Char* - (Char* ('<![' | ']]>') Char*)  
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!['
     */
    private final void scanConditionalSect()
        throws IOException, SAXException {

        checkForPEReference(false);
        if (fEntityScanner.skipString("INCLUDE")) {
            // call handler
            if (fDTDHandler != null) {
                fDTDHandler.startConditional(
                                            XMLDTDHandler.CONDITIONAL_INCLUDE);
            }
            checkForPEReference(false);
            if (!fEntityScanner.skipChar('[')) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MarkupNotRecognizedInDTD",
                                           null,
                                           XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fIncludeSectDepth++;
            // just stop there and go back to the main loop
        }
        else if (fEntityScanner.skipString("IGNORE")) {
            // call handler
            if (fDTDHandler != null) {
                fDTDHandler.startConditional(XMLDTDHandler.CONDITIONAL_IGNORE);
            }
            checkForPEReference(false);
            if (!fEntityScanner.skipChar('[')) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MarkupNotRecognizedInDTD",
                                           null,
                                           XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            int initialDepth = ++fIncludeSectDepth;
            while (true) {
                if (fEntityScanner.skipChar('<')) {
                    //
                    // These tests are split so that we handle cases like
                    // '<<![' and '<!<![' which we might otherwise miss.
                    //
                    if (fEntityScanner.skipChar('!')
                        && fEntityScanner.skipChar('[')) {
                        fIncludeSectDepth++;
                    }
                } else if (fEntityScanner.skipChar(']')) {
                    //
                    // The same thing goes for ']<![' and '<]]>', etc.
                    //
                    if (fEntityScanner.skipChar(']')) {
                        while (fEntityScanner.skipChar(']')) {
                            /* empty loop body */
                        }
                        if (fEntityScanner.skipChar('>')) {
                            if (fIncludeSectDepth-- == initialDepth) {
                                // decreaseMarkupDepth();

                                // call handler
                                if (fDTDHandler != null) {
                                    fDTDHandler.endConditional();
                                }
                                return;
                            }
                        }
                    }
                }
                else {
                    fEntityScanner.scanChar();
                    if (fScannerState == SCANNER_STATE_END_OF_INPUT) {
                        return;
                    }
                }
            }
        } else {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MarkupNotRecognizedInDTD",
                                       null,
                                       XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }
    } // scanConditionalSect()

    /** 
     * Dispatch an XML "event".
     *
     * @param complete True if this method is intended to scan
     *                 and dispatch as much as possible.                 
     *
     * @returns True if there is more to scan.
     *
     * @throws IOException  Thrown on i/o error.
     * @throws SAXException Thrown on parse error.
     *
     * @author Arnaud  Le Hors, IBM
     */
    protected final boolean scanDecls(boolean complete)
            throws IOException, SAXException {
        
        checkForPEReference(false);
        while (complete && fScannerState == SCANNER_STATE_MARKUP_DECL) {
            if (fEntityScanner.skipChar('<')) {
                if (fEntityScanner.skipChar('?')) {
                    scanPI();
                }
                else if (fEntityScanner.skipChar('!')) {
                    if (fEntityScanner.skipChar('-')) {
                        if (!fEntityScanner.skipChar('-')) {
                            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                       "InvalidCommentStart",
                                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                        }
                        scanComment();
                    }
                    else if (fEntityScanner.skipString("ELEMENT")) {
                        scanElementDecl();
                    }
                    else if (fEntityScanner.skipString("ATTLIST")) {
                        scanAttlistDecl();
                    }
                    else if (fEntityScanner.skipString("ENTITY")) {
                        scanEntityDecl();
                    }
                    else if (fEntityScanner.skipString("NOTATION")) {
                        scanNotationDecl();
                    }
                    else if (fEntityScanner.skipChar('[')) {
                        scanConditionalSect();
                    }
                }
            }
            else if (fIncludeSectDepth > 0 && fEntityScanner.skipChar(']')) {
                // end of conditional section?
                if (!fEntityScanner.skipChar(']')
                    || !fEntityScanner.skipChar('>')) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_UNTERMINATED_SEQ",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                // call handler
                if (fDTDHandler != null) {
                    fDTDHandler.endConditional();
                }
                // decreaseMarkupDepth();
                fIncludeSectDepth--;
            }
            else if (!fScanningExtSubset && fEntityScanner.skipChar(']')) {
                return false;
            } else {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MarkupNotRecognizedInDTD",
                                           null,XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            checkForPEReference(false);
        }
        return fScannerState != SCANNER_STATE_END_OF_INPUT;
    }

    /**
     * Check for any parameter entity reference. If there is some "expand them"
     * by calling the corresponding entity from the entity manager.
     * This is recursive and will process has many refs as possible.
     *
     * @param spaceRequired Specify whether some leading whitespace should be
     *                      found
     * @return whether any leading whitespace was found.
     */
    private boolean checkForPEReference(boolean spaceRequired)
        throws IOException, SAXException
    {
        boolean sawSpace = fEntityScanner.skipSpaces();
        if (!fScanningExtSubset) {
            return !spaceRequired || sawSpace;
        }
        if (!fEntityScanner.skipChar('%')) {
            return !spaceRequired || sawSpace;
        }
        while (true) {
            String name = fEntityScanner.scanName();
            if (name == null) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_NAME_REQUIRED_IN_PEREFRENCE",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            } else if (!fEntityScanner.skipChar(';')) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE",
                                           null,XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fEntityManager.startEntity("%" + name);
            fEntityScanner.skipSpaces();
            if (!fEntityScanner.skipChar('%'))
                return true;
        }
    }

    private final void pushOpStack(int c) {
        if (fOpStack.length == fDepth) {
            int[] newStack = new int[fDepth * 2];
            System.arraycopy(fOpStack, 0, newStack, 0, fDepth);
            fOpStack = newStack;
        }
        fOpStack[fDepth] = c;
    }

    private final int popOpStack() {
        return fOpStack[fDepth];
    }

    private final void ensureEnumerationSize(int size) {
        if (fEnumeration.length == size) {
            String[] newEnum = new String[size * 2];
            System.arraycopy(fEnumeration, 0, newEnum, 0, size);
            fEnumeration = newEnum;
        }
    }

} // class XMLDTDScanner
