/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.impl;

import java.io.IOException;
import java.io.EOFException;

import org.apache.xerces.impl.XMLEntityManager;
import org.apache.xerces.impl.XMLErrorReporter;
import org.apache.xerces.impl.msg.XMLMessageFormatter;
import org.apache.xerces.impl.validation.GrammarPool;

import org.apache.xerces.util.XMLChar;
import org.apache.xerces.util.SymbolTable;

import org.apache.xerces.xni.XMLComponent;
import org.apache.xerces.xni.XMLComponentManager;
import org.apache.xerces.xni.XMLDTDContentModelHandler;
import org.apache.xerces.xni.XMLDTDContentModelSource;
import org.apache.xerces.xni.XMLDTDHandler;
import org.apache.xerces.xni.XMLDTDSource;
import org.apache.xerces.xni.XMLEntityHandler;
import org.apache.xerces.xni.XMLString;

import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;

/**
 * @author Stubs generated by DesignDoc on Mon Sep 11 11:10:57 PDT 2000
 * @author Arnaud  Le Hors, IBM
 * @version $Id$
 */
public class XMLDTDScanner
    extends XMLScanner
    implements XMLComponent, 
               XMLDTDSource, XMLDTDContentModelSource, XMLEntityHandler {

    //
    // Constants
    //

    // scanner states

    /** Scanner state: Text declaration. */
    protected static final int SCANNER_STATE_TEXT_DECL = 0;

    /** Scanner state: start of markup. */
    protected static final int SCANNER_STATE_MARKUP_DECL = 1;

    /** Scanner state: comment. */
    protected static final int SCANNER_STATE_COMMENT = 2;

    /** Scanner state: processing instruction. */
    protected static final int SCANNER_STATE_PI = 3;

    protected static final int SCANNER_STATE_ELEMENT_DECL = 4;

    protected static final int SCANNER_STATE_ATTLIST_DECL = 5;

    protected static final int SCANNER_STATE_NOTATION_DECL = 6;

    protected static final int SCANNER_STATE_ENTITY_DECL = 7;

    // debugging

    /** Debug scanner state. */
    private static final boolean DEBUG_SCANNER_STATE = false;

    //
    // Data
    //

    /** fErrorReporter */
    protected XMLErrorReporter fErrorReporter;

    /** fEntityManager */
    protected XMLEntityManager fEntityManager;

    /** fGrammarPool */
    protected GrammarPool fGrammarPool;

    /** fDTDHandler */
    protected XMLDTDHandler fDTDHandler;

    /** fDTDContentModelHandler */
    protected XMLDTDContentModelHandler fDTDContentModelHandler;

    /** Scanner state. */
    protected int fScannerState;

    // private data

    private boolean fValidation = false;

    private boolean fStartDTDCalled = false;

    private boolean fScanningExtSubset;
    
    private boolean fEndOfDTD = false;

    private String[] fPseudoAttributeValues = new String[3];

    private int[] fOpStack = new int[5];
    private int fDepth;

    private XMLString fDefaultValue = new XMLString();
    private String[] fEnumeration = new String[5];
    private int fEnumerationCount;

    // symbols

    private String fXmlSymbol;
    private String fXmlSpace;
    private String fDefault;
    private String fPreserve;

    //
    // Constructors
    //

    /**
     * 
     */
    public XMLDTDScanner() {
    }

    //
    // Methods
    //

    /**
     * scanDTD
     * 
     * @param complete 
     * 
     * @return 
     */
    public boolean scanDTD(boolean complete)
        throws IOException, SAXException {

        // call handler
        if (fDTDHandler != null && fStartDTDCalled == false) {
            fDTDHandler.startDTD();
        }

        // set starting state
        setScannerState(SCANNER_STATE_TEXT_DECL);

        scanTextDecl(complete);

        // next state is markup decls regardless of whether there
        // is a TextDecl or not
        setScannerState(SCANNER_STATE_MARKUP_DECL);

        // keep dispatching "events"
        while (complete) {
            if (!scanDecls(complete)) {
                // call handler
                if (fDTDHandler != null) {
                    fDTDHandler.endDTD();
                }
                return false;
            }
        }

        // return that there is more to scan
        return true;

    } // scanDTD

    /**
     * scanDTDFragment
     * 
     * @param complete 
     * 
     * @return 
     */
    public boolean scanDTDFragment(boolean complete)
        throws IOException, SAXException {

        fScanningExtSubset = true;

        // set starting state
        setScannerState(SCANNER_STATE_TEXT_DECL);

        scanTextDecl(complete);

        // next state is markup decls regardless of whether there
        // is a TextDecl or not
        setScannerState(SCANNER_STATE_MARKUP_DECL);

        // keep dispatching "events"
        do {
            if (!scanDecls(complete)) {
                return false;
            }
        } while (complete);

        // return that there is more to scan
        return true;

    } // scanDTDFragment

    /**
     * scanDTDInternalSubset
     * 
     * @param complete 
     * 
     * @return 
     */
    public boolean scanDTDInternalSubset(boolean complete, boolean standalone,
                                         boolean hasExtDTD)
        throws IOException, SAXException {

        // call handler
        if (fDTDHandler != null) {
            fStartDTDCalled = true;
            fDTDHandler.startDTD();
        }
        fScanningExtSubset = false;

        // set starting state
        setScannerState(SCANNER_STATE_MARKUP_DECL);

        // keep dispatching "events"
        do {
            if (!scanDecls(complete)) {
                return false;
            }
        } while (complete);

        // REVISIT: fix this for the case when it's not complete
        // call handler
        if (fDTDHandler != null && hasExtDTD == false) {
            fDTDHandler.endDTD();
        }

        // return that there is more to scan
        return true;

    } // scanDTDInternalSubset

    //
    // XMLComponent methods
    //

    /**
     * reset
     * 
     * @param componentManager 
     */
    public void reset(XMLComponentManager componentManager)
        throws SAXException {

        super.reset(componentManager);

        // Xerces features
/*        fValidation =
            componentManager.getFeature(Constants.XERCES_FEATURE_PREFIX
                                        + Constants.VALIDATION_FEATURE);
*/
        // Xerces properties
        fGrammarPool = (GrammarPool)
            componentManager.getProperty(Constants.XERCES_PROPERTY_PREFIX
                                         + Constants.GRAMMAR_POOL_PROPERTY);
        fErrorReporter = (XMLErrorReporter)
            componentManager.getProperty(Constants.XERCES_PROPERTY_PREFIX
                                         + Constants.ERROR_REPORTER_PROPERTY);

        fEndOfDTD = false;

        // save built-in symbols
        fXmlSymbol = fSymbolTable.addSymbol("xml");
        fXmlSpace = fSymbolTable.addSymbol("xml:space");
        fDefault = fSymbolTable.addSymbol("default");
        fPreserve = fSymbolTable.addSymbol("preserve");

    } // reset

    /**
     * setFeature
     * 
     * @param featureId 
     * @param state 
     */
    public void setFeature(String featureId, boolean state)
        throws SAXNotRecognizedException, SAXNotSupportedException {

        // Xerces properties
        if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            String feature =
                featureId.substring(Constants.XERCES_FEATURE_PREFIX.length());
            if (feature.equals(Constants.VALIDATION_FEATURE)) {
                fValidation = state;
            }
        }

    } // setFeature

    /**
     * setProperty
     * 
     * @param propertyId 
     * @param value 
     */
    public void setProperty(String propertyId, Object value)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        
        super.setProperty(propertyId, value);

        // Xerces properties
        if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {
            String property =
               propertyId.substring(Constants.XERCES_PROPERTY_PREFIX.length());
            if (property.equals(Constants.GRAMMAR_POOL_PROPERTY)) {
                fGrammarPool = (GrammarPool)value;
            }
            return;
        }

    } // setProperty

    //
    // XMLDTDSource methods
    //

    /**
     * setDTDHandler
     * 
     * @param dtdHandler 
     */
    public void setDTDHandler(XMLDTDHandler dtdHandler) {
        fDTDHandler = dtdHandler;
    } // setDTDHandler

    //
    // XMLDTDContentModelSource methods
    //

    /**
     * setDTDContentModelHandler
     * 
     * @param dtdContentModelHandler 
     */
    public void setDTDContentModelHandler(XMLDTDContentModelHandler
                                          dtdContentModelHandler) {
        fDTDContentModelHandler = dtdContentModelHandler;
    } // setDTDContentModelHandler

    //
    // XMLEntityHandler methods
    //

    /**
     * startEntity
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     * @param encoding
     */
    public void startEntity(String name, String publicId, String systemId,
                            String encoding) throws SAXException {
        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.startEntity(name, publicId, systemId, encoding);
        }
    } // startEntity(String,String,String,String)

    /**
     * endEntity
     * 
     * @param name 
     */
    public void endEntity(String name)
        throws SAXException {

        if (name.equals("[dtd]")) {
            fEndOfDTD = true;
        }

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.endEntity(name);
        }

    } // endEntity(String)

    // helper methods

    /**
     * Sets the scanner state.
     *
     * @param state The new scanner state.
     */
    protected final void setScannerState(int state) {

        fScannerState = state;
        if (DEBUG_SCANNER_STATE) {
            System.out.print("### setScannerState: ");
            System.out.print(getScannerStateName(state));
            System.out.println();
        }

    } // setScannerState(int)

    //
    // Private methods
    //

    /** Returns the scanner state name. */
    private static String getScannerStateName(int state) {

        if (DEBUG_SCANNER_STATE) {
            switch (state) {
                case SCANNER_STATE_TEXT_DECL: return "SCANNER_STATE_TEXT_DECL";
            }
        }

        return "??? ("+state+')';

    } // getScannerStateName(int):String

    /** 
     * Dispatch an XML "event".
     *
     * @param complete True if this method is intended to scan
     *                 and dispatch as much as possible.                 
     *
     * @returns True if there is more to dispatch either from this 
     *          or a another dispatcher.
     *
     * @throws IOException  Thrown on i/o error.
     * @throws SAXException Thrown on parse error.
     *
     * @author Andy Clark, IBM
     * @author Arnaud  Le Hors, IBM
     */
    protected final boolean scanTextDecl(boolean complete) 
        throws IOException, SAXException {

        // scan XMLDecl
        if (fEntityScanner.skipString("<?xml")) {
            // NOTE: special case where document starts with a PI
            //       whose name starts with "xml" (e.g. "xmlfoo")
            if (XMLChar.isName(fEntityScanner.peekChar())) {
                fStringBuffer.clear();
                fStringBuffer.append("xml");
                while (XMLChar.isName(fEntityScanner.peekChar())) {
                    fStringBuffer.append((char)fEntityScanner.scanChar());
                }
                String target =
                    fSymbolTable.addSymbol(fStringBuffer.ch,
                                           fStringBuffer.offset,
                                           fStringBuffer.length);
                scanPIData(target, fString);
            }

            // standard Text declaration
            else {
                scanXMLDeclOrTextDecl(true, fPseudoAttributeValues);
            }
            return complete;
        }

        // if no TextDecl, then scan piece of decls
        return true;

    } // scanTextDecl(boolean):boolean

    /**
     * Scans a processing data. This is needed to handle the situation
     * where a document starts with a processing instruction whose 
     * target name <em>starts with</em> "xml". (e.g. xmlfoo)
     *
     * @param target The PI target
     * @param data The string to fill in with the data
     */
    protected final void scanPIData(String target, XMLString data) 
        throws IOException, SAXException {

        super.scanPIData(target, data);

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.processingInstruction(target, data);
        }

    } // scanPIData(String)

    /**
     * Scans a comment.
     * <p>
     * <pre>
     * [15] Comment ::= '&lt!--' ((Char - '-') | ('-' (Char - '-')))* '-->'
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!--'
     */
    protected final void scanComment() throws IOException, SAXException {

        scanComment(fStringBuffer);

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.comment(fStringBuffer);
        }

    } // scanComment()

    /**
     * Scans an element declaration
     * <p>
     * <pre>
     * [45]    elementdecl    ::=    '<!ELEMENT' S Name S contentspec S? '>'
     * [46]    contentspec    ::=    'EMPTY' | 'ANY' | Mixed | children  
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!ELEMENT'
     */
    protected final void scanElementDecl() throws IOException, SAXException {

        // spaces
        if (!fEntityScanner.skipSpaces()) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_BEFORE_ELEMENT_NAME_IN_ELEMENTDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // element name
        String name = fEntityScanner.scanName();
        if (name == null) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_ELEMENT_NAME_REQUIRED",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // spaces
        if (!fEntityScanner.skipSpaces()) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_AFTER_ELEMENT_NAME_IN_ELEMENTDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // content model
        String contentModel = null;
        if (fEntityScanner.skipString("EMPTY")) {
            contentModel = "EMPTY";
        }
        else if (fEntityScanner.skipString("ANY")) {
            contentModel = "ANY";
        }
        else {
            if (!fEntityScanner.skipChar('(')) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "OpenParenthesisRequiredInContentModel",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fStringBuffer.clear();
            fStringBuffer.append('(');
            fEntityScanner.skipSpaces();

            // Mixed content model
            if (fEntityScanner.skipString("#PCDATA")) {
                scanMixed();
            }
            else {              // children content
                scanChildren();
            }
            contentModel = fStringBuffer.toString();
        }
        fEntityScanner.skipSpaces();
        // end
        if (!fEntityScanner.skipChar('>')) {
            System.out.println("*** char: '"+(char)fEntityScanner.peekChar()+'\'');
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "ElementdeclUnterminated",
                                       new Object[]{name},
                                       XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.elementDecl(name, contentModel);
        }

    } // scanElementDecl()

    /**
     * scan Mixed content model
     * This assumes the content model has been parsed up to #PCDATA and
     * can simply append to fStringBuffer.
     * <pre>
     * [51]    Mixed    ::=    '(' S? '#PCDATA' (S? '|' S? Name)* S? ')*'  
     *                       | '(' S? '#PCDATA' S? ')'  
     * </pre>
     */
    private final void scanMixed() throws IOException, SAXException {

        fStringBuffer.append("#PCDATA");
        fEntityScanner.skipSpaces();
        while (fEntityScanner.skipChar('|')) {
            fStringBuffer.append('|');
            fEntityScanner.skipSpaces();

            String childName = fEntityScanner.scanName();
            if (childName == null) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_ELEMENT_NAME_REQUIRED",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fStringBuffer.append(childName);
            fEntityScanner.skipSpaces();
        }
        if (!fEntityScanner.skipChar(')')) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "CloseParenthesisRequiredInContentModel",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }
        fStringBuffer.append(')');
        // occurence operator
        if (fEntityScanner.skipChar('*')) {
            fStringBuffer.append('*');
        }
        // we are done
    }

    /**
     * scan children content model
     * This assumes it can simply append to fStringBuffer.
     * <pre>
     * [47]    children  ::=    (choice | seq) ('?' | '*' | '+')? 
     * [48]    cp        ::=    (Name | choice | seq) ('?' | '*' | '+')? 
     * [49]    choice    ::=    '(' S? cp ( S? '|' S? cp )+ S? ')'
     * [50]    seq       ::=    '(' S? cp ( S? ',' S? cp )* S? ')' 
     * </pre>
     */
    private final void scanChildren() throws IOException, SAXException {
        fDepth = 0;
        int currentOp = 0;
        int c;
        do {
            c = fEntityScanner.peekChar();
            if (c == '(') {
                fEntityScanner.scanChar();
                fStringBuffer.append('(');
                // push current op on stack and reset it
                pushOpStack(currentOp);
                currentOp = 0;
                fDepth++;
            }
            else if (c == ')') {
                fEntityScanner.scanChar();
                fStringBuffer.append(')');
                // restore previous op
                currentOp = popOpStack();
                fDepth--;
            }
            else if (c == ',') {
                if (currentOp == 0) {
                    currentOp = c;
                }
                else if (c != currentOp) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_UNTERMINATED_CHOICE",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                fEntityScanner.scanChar();
                fStringBuffer.append(',');
            }
            else if (c == '|') {
                if (currentOp == 0) {
                    currentOp = c;
                }
                else if (c != currentOp) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_UNTERMINATED_SEQ",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                fEntityScanner.scanChar();
                fStringBuffer.append('|');
            }
            else if (c == '?' || c == '*' || c == '+') {
                fEntityScanner.scanChar();
                fStringBuffer.append((char)c);
            }
            else {
                String childName = fEntityScanner.scanName();
                if (childName == null) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_ELEMENT_NAME_REQUIRED",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                fStringBuffer.append(childName);
            }
            fEntityScanner.skipSpaces();
        } while (fDepth >= 0);

        // occurence operator
        c = fEntityScanner.peekChar();
        if (c == '?' || c == '*' || c == '+') {
            fEntityScanner.scanChar();
            fStringBuffer.append((char)c);
        }
        // we are done
    }

    /**
     * Scans an attlist declaration
     * <p>
     * <pre>
     * [52]  AttlistDecl    ::=   '<!ATTLIST' S Name AttDef* S? '>' 
     * [53]  AttDef         ::=   S Name S AttType S DefaultDecl 
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!ATTLIST'
     */
    protected final void scanAttlistDecl() throws IOException, SAXException {

        // spaces
        if (!fEntityScanner.skipSpaces()) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_BEFORE_ATTRIBUTE_NAME_IN_ATTRDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // element name
        String elName = fEntityScanner.scanName();
        if (elName == null) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_ELEMENT_NAME_REQUIRED",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // spaces
        if (!fEntityScanner.skipSpaces()) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_AFTER_ELEMENT_NAME_IN_ATTRDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // definitions
        do {
            String name = fEntityScanner.scanName();
            if (name == null) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_ATTRIBUTE_NAME_REQUIRED",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            // spaces
            if (!fEntityScanner.skipSpaces()) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_AFTER_ATTRIBUTE_NAME_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            // type
            String type = scanAttType();

            // spaces
            if (!fEntityScanner.skipSpaces()) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_AFTER_ATTRIBUTE_TYPE_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }

            // default decl
            String defaultType = scanAttDefaultDecl(name, fDefaultValue);

            // call handler
            if (fDTDHandler != null) {
                String[] enum = null;
                if (fEnumerationCount != 0) {
                    enum = new String[fEnumerationCount];
                    System.arraycopy(fEnumeration, 0, enum,
                                     0, fEnumerationCount);
                }
                fDTDHandler.attributeDecl(elName, name, type, enum,
                                          defaultType, fDefaultValue);
            }
            fEntityScanner.skipSpaces();
            // is it the end?
            if (fEntityScanner.skipChar('>')) {
                return;
            }

        } while(true);

    } // scanAttlistDecl()

    /**
     * Scans an attribute type definition
     * <p>
     * <pre>
     * [54]  AttType        ::=   StringType | TokenizedType | EnumeratedType  
     * [55]  StringType     ::=   'CDATA' 
     * [56]  TokenizedType  ::=   'ID'
     *                          | 'IDREF'
     *                          | 'IDREFS'
     *                          | 'ENTITY'
     *                          | 'ENTITIES'
     *                          | 'NMTOKEN'
     *                          | 'NMTOKENS'
     * [57]  EnumeratedType ::=    NotationType | Enumeration  
     * [58]  NotationType ::= 'NOTATION' S '(' S? Name (S? '|' S? Name)* S? ')'
     * [59]  Enumeration    ::=    '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')' 
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!ATTLIST'
     */
    private final String scanAttType() throws IOException, SAXException {

        String type = null;
        fEnumerationCount = 0;
        /*
         * Watchout: the order here is important: when a string happens to
         * be a substring of another string, the longer one needs to be
         * looked for first!!
         */
        if (fEntityScanner.skipString("CDATA")) {
            type = "CDATA";
        }
        else if (fEntityScanner.skipString("IDREFS")) {
            type = "IDREFS";
        }
        else if (fEntityScanner.skipString("IDREF")) {
            type = "IDREF";
        }
        else if (fEntityScanner.skipString("ID")) {
            type = "ID";
        }
        else if (fEntityScanner.skipString("ENTITY")) {
            type = "ENTITY";
        }
        else if (fEntityScanner.skipString("ENTITIES")) {
            type = "ENTITIES";
        }
        else if (fEntityScanner.skipString("NMTOKENS")) {
            type = "NMTOKENS";
        }
        else if (fEntityScanner.skipString("NMTOKEN")) {
            type = "NMTOKEN";
        }
        else if (fEntityScanner.skipString("NOTATION")) {
            type = "NOTATION";
            // spaces
            if (!fEntityScanner.skipSpaces()) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "MSG_SPACE_REQUIRED_AFTER_ATTRIBUTE_NAME_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            // open paren
            int c = fEntityScanner.scanChar();
            if (c != '(') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "OPEN_PAREN_REQUIRED_AFTER_NOTAITON_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            do {
                String aName = fEntityScanner.scanName();
                if (aName == null) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                   "MSG_SPACE_REQUIRED_AFTER_NOTAITON_IN_ATTRDECL",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                ensureEnumerationSize(fEnumerationCount + 1);
                fEnumeration[fEnumerationCount++] = aName;
                fEntityScanner.skipSpaces();
                c = fEntityScanner.scanChar();
            } while (c == '|');
            if (c != ')') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "CLOSE_PAREN_REQUIRED_AFTER_NOTAITON_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
        }
        else {              // Enumeration
            type = "ENUMERATION";
            // open paren
            int c = fEntityScanner.scanChar();
            if (c != '(') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "OPEN_PAREN_REQUIRED_BEFORE_ENUMERATION_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            do {
                String token = fEntityScanner.scanNmtoken();
                if (token == null) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "NMTOKEN_REQUIRED_IN_ENUMERATION_IN_ATTRDECL",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                ensureEnumerationSize(fEnumerationCount + 1);
                fEnumeration[fEnumerationCount++] = token;
                fEntityScanner.skipSpaces();
                c = fEntityScanner.scanChar();
            } while (c == '|');
            if (c != ')') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "CLOSE_PAREN_REQUIRED_AFTER_ENUMERATION_IN_ATTRDECL",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
        }
        return type;

    } // scanAttType():String


    /**
     * Scans an attribute default declaration
     * <p>
     * <pre>
     * [60] DefaultDecl ::= '#REQUIRED' | '#IMPLIED' | (('#FIXED' S)? AttValue)
     * </pre>
     *
     * @param name The name of the attribute being scanned.
     * @param defaultVal The string to fill in with the default value.
     */
    protected final String scanAttDefaultDecl(String name,
                                              XMLString defaultVal)
        throws IOException, SAXException {

        String defaultType = null;
        fString.clear();
        if (fEntityScanner.skipString("#REQUIRED")) {
            defaultType = "#REQUIRED";
        }
        else if (fEntityScanner.skipString("#IMPLIED")) {
            defaultType = "#IMPLIED";
        }
        else {
            if (fEntityScanner.skipString("#FIXED")) {
                defaultType = "#FIXED";
                // spaces
                if (!fEntityScanner.skipSpaces()) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "MSG_SPACE_REQUIRED_AFTER_ATTRIBUTE_DEFAULT_IN_ATTRDECL",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
            }
            // AttValue
            // REVISIT: Do it right
            int quote = fEntityScanner.scanChar();
            if (quote != '\'' && quote != '"') {
                fErrorReporter.reportError( XMLMessageFormatter.XML_DOMAIN, "QuoteRequiredInDecl", 
                                            new Object[]{name}, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            // REVISIT: fix this
            XMLString value = fString;
            if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                fStringBuffer.clear();
                do {
                    fStringBuffer.append(fString);
                } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                fStringBuffer.append(fString);
                value = fStringBuffer;
            }
            if (!fEntityScanner.skipChar(quote)) {
                fErrorReporter.reportError( XMLMessageFormatter.XML_DOMAIN, "CloseQuoteMissingInDecl", 
                                            new Object[]{name}, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            defaultVal.setValues(value);
        }
        return defaultType;

    } // ScanAttDefaultDecl

    /**
     * Scans an entity declaration
     * <p>
     * <pre>
     * [70]    EntityDecl  ::=    GEDecl | PEDecl 
     * [71]    GEDecl      ::=    '<!ENTITY' S Name S EntityDef S? '>' 
     * [72]    PEDecl      ::=    '<!ENTITY' S '%' S Name S PEDef S? '>' 
     * [73]    EntityDef   ::=    EntityValue | (ExternalID NDataDecl?) 
     * [74]    PEDef       ::=    EntityValue | ExternalID 
     * [75]    ExternalID  ::=    'SYSTEM' S SystemLiteral 
     *                          | 'PUBLIC' S PubidLiteral S SystemLiteral  
     * [76]    NDataDecl   ::=    S 'NDATA' S Name 
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!ENTITY'
     */
    private final void scanEntityDecl() throws IOException, SAXException {

            // TODO: scan definition
            while (fEntityScanner.scanData(">", fString)) {
                // skip to end of internal subset
            }

        // call handler
        if (fDTDHandler != null) {
            //            fDTDHandler.(fStringBuffer);
        }

    } // scanEntityDecl()

    /**
     * Scans a notation declaration
     * <p>
     * <pre>
     * [82] NotationDecl ::= '<!NOTATION' S Name S (ExternalID|PublicID) S? '>'
     * [83]  PublicID    ::= 'PUBLIC' S PubidLiteral  
     * </pre>
     * <p>
     * <strong>Note:</strong> Called after scanning past '&lt;!NOTATION'
     */
    private final void scanNotationDecl() throws IOException, SAXException {

        // spaces
        if (!fEntityScanner.skipSpaces()) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_NOTATIONDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // notation name
        String name = fEntityScanner.scanName();
        if (name == null) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_NOTATION_NAME_REQUIRED",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // spaces
        if (!fEntityScanner.skipSpaces()) {
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "MSG_SPACE_REQUIRED_AFTER_NOTATION_NAME_IN_NOTATIONDECL",
                                       null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // external id
        String systemId = null;
        String publicId = null;
        if (fEntityScanner.skipString("SYSTEM")) {
            if (!fEntityScanner.skipSpaces()) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "SpaceRequiredAfterSYSTEM",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            int quote = fEntityScanner.peekChar();
            if (quote != '\'' && quote != '"') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "QuoteRequiredInSystemID",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fEntityScanner.scanChar();
            // REVISIT: do right
            XMLString value = fString;
            if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                fStringBuffer.clear();
                do {
                    fStringBuffer.append(fString);
                } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                fStringBuffer.append(fString);
                value = fStringBuffer;
            }
            systemId = value.toString();
            if (!fEntityScanner.skipChar(quote)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "SystemIDUnterminated",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
        }
        else if (fEntityScanner.skipString("PUBLIC")) {
            if (!fEntityScanner.skipSpaces()) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "SpaceRequiredAfterPUBLIC",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            int quote = fEntityScanner.peekChar();
            if (quote != '\'' && quote != '"') {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "QuoteRequiredInPublicID",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }
            fEntityScanner.scanChar();
            // REVISIT: do right
            XMLString value = fString;
            if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                fStringBuffer.clear();
                do {
                    fStringBuffer.append(fString);
                } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                fStringBuffer.append(fString);
                value = fStringBuffer;
            }
            publicId = value.toString();
            if (!fEntityScanner.skipChar(quote)) {
                fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                           "PublicIDUnterminated",
                                           null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
            }

            // skip possible space
            fEntityScanner.skipSpaces();

            // do we have a system id as well?
            int c = fEntityScanner.peekChar();
            if (c != '>') {
                if (c != '\'' && c != '"') {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "QuoteRequiredInSystemID",
                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
                fEntityScanner.scanChar();
                // REVISIT: do right
                value = fString;
                if (fEntityScanner.scanAttContent(quote, fString) != quote) {
                    fStringBuffer.clear();
                    do {
                        fStringBuffer.append(fString);
                    } while (fEntityScanner.scanAttContent(quote, fString) != quote);
                    fStringBuffer.append(fString);
                    value = fStringBuffer;
                }
                systemId = value.toString();
                if (!fEntityScanner.skipChar(quote)) {
                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                               "SystemIDUnterminated",
                                               null, 
                                               XMLErrorReporter.SEVERITY_FATAL_ERROR);
                }
            }
        }

        // skip possible trailing space
        fEntityScanner.skipSpaces();

        // end
        if (!fEntityScanner.skipChar('>')) {
            System.out.println("*** char: '"+(char)fEntityScanner.peekChar()+'\'');
            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                       "NotationdeclUnterminated",
                                       new Object[]{name},
                                       XMLErrorReporter.SEVERITY_FATAL_ERROR);
        }

        // call handler
        if (fDTDHandler != null) {
            fDTDHandler.notationDecl(name, publicId, systemId);
        }

    } // scanNotationDecl()

    /** 
     * Dispatch an XML "event".
     *
     * @param complete True if this method is intended to scan
     *                 and dispatch as much as possible.                 
     *
     * @returns True if there is more to scan.
     *
     * @throws IOException  Thrown on i/o error.
     * @throws SAXException Thrown on parse error.
     *
     * @author Arnaud  Le Hors, IBM
     */
    protected final boolean scanDecls(boolean complete)
            throws IOException, SAXException {
        
        boolean again;
        do {
            again = false;
            switch (fScannerState) {
                case SCANNER_STATE_MARKUP_DECL: {
                    fEntityScanner.skipSpaces();
                    if (!fEndOfDTD && fEntityScanner.skipChar('<')) {
                        if (fEntityScanner.skipChar('?')) {
                            setScannerState(SCANNER_STATE_PI);
                            again = true;
                            break;
                        }
                        else if (fEntityScanner.skipChar('!')) {
                            if (fEntityScanner.skipChar('-')) {
                                if (!fEntityScanner.skipChar('-')) {
                                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                               "InvalidCommentStart",
                                                               null, XMLErrorReporter.SEVERITY_FATAL_ERROR);
                                }
                                setScannerState(SCANNER_STATE_COMMENT);
                                again = true;
                                break;
                            }
                            else if (fEntityScanner.skipString("ELEMENT")) {
                                setScannerState(SCANNER_STATE_ELEMENT_DECL);
                                again = true;
                                break;
                            }
                            else if (fEntityScanner.skipString("ATTLIST")) {
                                setScannerState(SCANNER_STATE_ATTLIST_DECL);
                                again = true;
                                break;
                            }
                            else if (fEntityScanner.skipString("ENTITY")) {
                                setScannerState(SCANNER_STATE_ENTITY_DECL);
                                again = true;
                                break;
                            }
                            else if (fEntityScanner.skipString("NOTATION")) {
                                setScannerState(SCANNER_STATE_NOTATION_DECL);
                                again = true;
                                break;
                            }
                        }
                    }
                    if (!fEndOfDTD) {
                        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,
                                                   "MarkupNotRecognizedInDTD",
                                                   null,XMLErrorReporter.SEVERITY_FATAL_ERROR);
                    }
                    complete = false;
                    break;
                }
                case SCANNER_STATE_ELEMENT_DECL: {
                    scanElementDecl();
                    setScannerState(SCANNER_STATE_MARKUP_DECL);
                    break;  
                }
                case SCANNER_STATE_ATTLIST_DECL: {
                    scanAttlistDecl();
                    setScannerState(SCANNER_STATE_MARKUP_DECL);
                    break;  
                }
                case SCANNER_STATE_COMMENT: {
                    scanComment();
                    setScannerState(SCANNER_STATE_MARKUP_DECL);
                    break;  
                }
                case SCANNER_STATE_PI: {
                    scanPI();
                    setScannerState(SCANNER_STATE_MARKUP_DECL);
                    break;  
                }
                case SCANNER_STATE_ENTITY_DECL: {
                    scanEntityDecl();
                    setScannerState(SCANNER_STATE_MARKUP_DECL);
                    break;  
                }
                case SCANNER_STATE_NOTATION_DECL: {
                    scanNotationDecl();
                    setScannerState(SCANNER_STATE_MARKUP_DECL);
                    break;  
                }
            }
        } while (complete || again);

        return complete;
    }

    private final void pushOpStack(int c) {
        if (fOpStack.length == fDepth) {
            int[] newStack = new int[fDepth * 2];
            System.arraycopy(fOpStack, 0, newStack, 0, fDepth);
            fOpStack = newStack;
        }
        fOpStack[fDepth] = c;
    }

    private final int popOpStack() {
        return fOpStack[fDepth];
    }

    private final void ensureEnumerationSize(int size) {
        if (fEnumeration.length == size) {
            String[] newEnum = new String[size * 2];
            System.arraycopy(fEnumeration, 0, newEnum, 0, size);
            fEnumeration = newEnum;
        }
    }

} // class XMLDTDScanner
