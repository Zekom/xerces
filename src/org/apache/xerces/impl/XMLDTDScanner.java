/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.impl;

import java.io.IOException;

import org.apache.xerces.impl.XMLEntityManager;
import org.apache.xerces.impl.XMLErrorReporter;
import org.apache.xerces.impl.validation.GrammarPool;

import org.apache.xerces.util.SymbolTable;

import org.apache.xerces.xni.XMLComponent;
import org.apache.xerces.xni.XMLComponentManager;
import org.apache.xerces.xni.XMLDTDContentModelHandler;
import org.apache.xerces.xni.XMLDTDContentModelSource;
import org.apache.xerces.xni.XMLDTDHandler;
import org.apache.xerces.xni.XMLDTDSource;
import org.apache.xerces.xni.XMLEntityHandler;

import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;

/**
 * @author Stubs generated by DesignDoc on Mon Sep 11 11:10:57 PDT 2000
 * @author Arnaud  Le Hors, IBM
 * @version $Id$
 */
public class XMLDTDScanner
    extends XMLScanner
    implements XMLComponent, 
               XMLDTDSource, XMLDTDContentModelSource, XMLEntityHandler {

    //
    // Data
    //

    /** fErrorReporter */
    protected XMLErrorReporter fErrorReporter;

    /** fEntityManager */
    protected XMLEntityManager fEntityManager;

    /** fGrammarPool */
    protected GrammarPool fGrammarPool;

    /** fDTDHandler */
    protected XMLDTDHandler fDTDHandler;

    /** fDTDContentModelHandler */
    protected XMLDTDContentModelHandler fDTDContentModelHandler;


    // private data

    private boolean fValidation = false;

    // symbols

    private String fXmlSymbol;
    private String fXmlSpace;
    private String fDefault;
    private String fPreserve;

    //
    // Constructors
    //

    /**
     * 
     */
    public XMLDTDScanner() {
    }

    //
    // Methods
    //

    /**
     * scanDTD
     * 
     * @param complete 
     * 
     * @return 
     */
    public boolean scanDTD(boolean complete)
        throws IOException, SAXException {
        return false;
    } // scanDTD

    /**
     * scanDTDFragment
     * 
     * @param complete 
     * 
     * @return 
     */
    public boolean scanDTDFragment(boolean complete)
        throws IOException, SAXException {
        return false;
    } // scanDTDFragment

    /**
     * scanDTDInternalSubset
     * 
     * @param complete 
     * 
     * @return 
     */
    public boolean scanDTDInternalSubset(boolean complete)
        throws IOException, SAXException {
        return false;
    } // scanDTDInternalSubset

    //
    // XMLComponent methods
    //

    /**
     * reset
     * 
     * @param componentManager 
     */
    public void reset(XMLComponentManager componentManager)
        throws SAXException {

        super.reset(componentManager);

        // Xerces features
        fValidation =
            componentManager.getFeature(Constants.XERCES_FEATURE_PREFIX
                                        + Constants.VALIDATION_FEATURE);

        // Xerces properties
        fGrammarPool = (GrammarPool)
            componentManager.getProperty(Constants.XERCES_PROPERTY_PREFIX
                                         + Constants.GRAMMAR_POOL_PROPERTY);

        // save built-in symbols
        fXmlSymbol = fSymbolTable.addSymbol("xml");
        fXmlSpace = fSymbolTable.addSymbol("xml:space");
        fDefault = fSymbolTable.addSymbol("default");
        fPreserve = fSymbolTable.addSymbol("preserve");

        // setup dispatcher
        //        setScannerState(SCANNER_STATE_XML_DECL);
        //        setDispatcher(fXMLDeclDispatcher);

    } // reset

    /**
     * setFeature
     * 
     * @param featureId 
     * @param state 
     */
    public void setFeature(String featureId, boolean state)
        throws SAXNotRecognizedException, SAXNotSupportedException {

        // Xerces properties
        if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            String feature =
                featureId.substring(Constants.XERCES_FEATURE_PREFIX.length());
            if (feature.equals(Constants.VALIDATION_FEATURE)) {
                fValidation = state;
            }
        }

    } // setFeature

    /**
     * setProperty
     * 
     * @param propertyId 
     * @param value 
     */
    public void setProperty(String propertyId, Object value)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        
        super.setProperty(propertyId, value);

        // Xerces properties
        if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {
            String property =
               propertyId.substring(Constants.XERCES_PROPERTY_PREFIX.length());
            if (property.equals(Constants.GRAMMAR_POOL_PROPERTY)) {
                fGrammarPool = (GrammarPool)value;
            }
            return;
        }

    } // setProperty

    //
    // XMLDTDSource methods
    //

    /**
     * setDTDHandler
     * 
     * @param dtdHandler 
     */
    public void setDTDHandler(XMLDTDHandler dtdHandler) {
        fDTDHandler = dtdHandler;
    } // setDTDHandler

    //
    // XMLDTDContentModelSource methods
    //

    /**
     * setDTDContentModelHandler
     * 
     * @param dtdContentModelHandler 
     */
    public void setDTDContentModelHandler(XMLDTDContentModelHandler
                                          dtdContentModelHandler) {
        fDTDContentModelHandler = dtdContentModelHandler;
    } // setDTDContentModelHandler

    //
    // XMLEntityHandler methods
    //

    /**
     * startEntity
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     * @param encoding
     */
    public void startEntity(String name, String publicId, String systemId,
                            String encoding) throws SAXException {
    } // startEntity(String,String,String,String)

    /**
     * endEntity
     * 
     * @param name 
     */
    public void endEntity(String name)
        throws SAXException {
    } // endEntity(String)

} // class XMLDTDScanner
