/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.parsers;

import org.apache.xerces.framework.XMLString;
import org.apache.xerces.scanners.XMLDTDContentModelHandler;
import org.apache.xerces.scanners.XMLDTDHandler;
import org.apache.xerces.scanners.XMLDTDScanner;
import org.apache.xerces.utils.QName;
import org.apache.xerces.utils.SymbolTable;
import org.apache.xerces.validators.grammars.DTDGrammar;
import org.xml.sax.SAXException;

/**
 * @author Stubs generated by DesignDoc on Wed Jun 07 11:58:44 PDT 2000
 * @version $Id$
 */
public class DTDParser
    extends XMLGrammarParser
    implements XMLDTDHandler, XMLDTDContentModelHandler {

    //
    // Data
    //

    /** fDTDScanner */
    protected XMLDTDScanner fDTDScanner;

    //
    // Constructors
    //

    /**
     * 
     * 
     * @param symbolTable 
     */
    public DTDParser(SymbolTable symbolTable) {
    }

    //
    // Methods
    //

    /**
     * getDTDGrammar
     * 
     * @return 
     */
    public DTDGrammar getDTDGrammar() {
        return null;
    } // getDTDGrammar

    //
    // XMLDTDHandler methods
    //

    /**
     * startDTD
     */
    public void startDTD()
        throws SAXException {
    } // startDTD

    /**
     * comment
     * 
     * @param text 
     */
    public void comment(XMLString text)
        throws SAXException {
    } // comment

    /**
     * processingInstruction
     * 
     * @param target 
     * @param data 
     */
    public void processingInstruction(String target, XMLString data)
        throws SAXException {
    } // processingInstruction

    /**
     * startExternalSubset
     */
    public void startExternalSubset()
        throws SAXException {
    } // startExternalSubset

    /**
     * endExternalSubset
     */
    public void endExternalSubset()
        throws SAXException {
    } // endExternalSubset

    /**
     * elementDecl
     * 
     * @param element 
     * @param contentModel 
     */
    public void elementDecl(QName element, XMLString contentModel)
        throws SAXException {
    } // elementDecl

    /**
     * startAttlist
     * 
     * @param element 
     */
    public void startAttlist(QName element)
        throws SAXException {
    } // startAttlist

    /**
     * attributeDecl
     * 
     * @param element 
     * @param attribute 
     * @param type 
     * @param enumeration 
     * @param defaultType 
     * @param defaultValue 
     */
    public void attributeDecl(QName element, QName attribute, short type, String[] enumeration, short defaultType, XMLString defaultValue)
        throws SAXException {
    } // attributeDecl

    /**
     * endAttlist
     */
    public void endAttlist()
        throws SAXException {
    } // endAttlist

    /**
     * internalEntityDecl
     * 
     * @param name 
     * @param text 
     * @param isPE 
     */
    public void internalEntityDecl(String name, XMLString text, boolean isPE)
        throws SAXException {
    } // internalEntityDecl

    /**
     * externalEntityDecl
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     * @param isPE 
     */
    public void externalEntityDecl(String name, String publicId, String systemId, boolean isPE)
        throws SAXException {
    } // externalEntityDecl

    /**
     * unparsedEntityDecl
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     * @param notation 
     */
    public void unparsedEntityDecl(String name, String publicId, String systemId, String notation)
        throws SAXException {
    } // unparsedEntityDecl

    /**
     * notationDecl
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     */
    public void notationDecl(String name, String publicId, String systemId)
        throws SAXException {
    } // notationDecl

    /**
     * startParameterEntityReference
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     */
    public void startParameterEntityReference(String name, String publicId, String systemId)
        throws SAXException {
    } // startParameterEntityReference

    /**
     * endParameterEntityReference
     * 
     * @param name 
     */
    public void endParameterEntityReference(String name)
        throws SAXException {
    } // endParameterEntityReference

    /**
     * startConditionalSection
     * 
     * @param type 
     */
    public void startConditionalSection(short type)
        throws SAXException {
    } // startConditionalSection

    /**
     * endConditionalSection
     */
    public void endConditionalSection()
        throws SAXException {
    } // endConditionalSection

    /**
     * endDTD
     */
    public void endDTD()
        throws SAXException {
    } // endDTD

    //
    // XMLDTDContentModelHandler methods
    //

    /**
     * startContentModel
     * 
     * @param element 
     * @param type 
     */
    public void startContentModel(QName element, short type)
        throws SAXException {
    } // startContentModel

    /**
     * mixedElement
     * 
     * @param element 
     */
    public void mixedElement(QName element)
        throws SAXException {
    } // mixedElement

    /**
     * childrenStartGroup
     */
    public void childrenStartGroup()
        throws SAXException {
    } // childrenStartGroup

    /**
     * childrenElement
     * 
     * @param element 
     */
    public void childrenElement(QName element)
        throws SAXException {
    } // childrenElement

    /**
     * childrenSeparator
     * 
     * @param separator 
     */
    public void childrenSeparator(short separator)
        throws SAXException {
    } // childrenSeparator

    /**
     * childrenOccurrence
     * 
     * @param occurrence 
     */
    public void childrenOccurrence(short occurrence)
        throws SAXException {
    } // childrenOccurrence

    /**
     * childrenEndGroup
     */
    public void childrenEndGroup()
        throws SAXException {
    } // childrenEndGroup

    /**
     * endContentModel
     */
    public void endContentModel()
        throws SAXException {
    } // endContentModel

} // class DTDParser
