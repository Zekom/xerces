/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.readers;

import java.io.IOException;
import org.apache.xerces.framework.XMLString;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;

/**
 * @author Stubs generated by DesignDoc on Wed Jun 07 11:58:44 PDT 2000
 * @version $Id$
 */
public class XMLEntityReader
    implements Locator {

    //
    // Constants
    //

    /** SCAN_ATT_COMPLETE */
    public static final short SCAN_ATT_COMPLETE = -1;

    /** SCAN_ATT_CONTENT */
    public static final short SCAN_ATT_CONTENT = -1;

    /** SCAN_ATT_ENTITY */
    public static final short SCAN_ATT_ENTITY = -1;

    //
    // Data
    //

    /** fEntityManager */
    protected XMLEntityManager fEntityManager;

    /** fInputSource */
    protected InputSource fInputSource;

    /** fRowNumber */
    protected int fRowNumber;

    /** fColumnNumber */
    protected int fColumnNumber;

    /** fBytePosition */
    protected long fBytePosition;

    /** fCharPosition */
    protected long fCharPosition;

    //
    // Constructors
    //

    /**
     * 
     * 
     * @param entityManager 
     * @param inputSource 
     */
    public XMLEntityReader(XMLEntityManager entityManager, InputSource inputSource) {
    }

    //
    // Methods
    //

    /**
     * getBytePosition
     * 
     * @return 
     */
    public long getBytePosition() {
        return -1;
    } // getBytePosition

    /**
     * getCharPosition
     * 
     * @return 
     */
    public long getCharPosition() {
        return -1;
    } // getCharPosition

    /**
     * lookingAtChar
     * 
     * @param c 
     * @param consume 
     * 
     * @return 
     */
    public boolean lookingAtChar(char c, boolean consume)
        throws IOException {
        return false;
    } // lookingAtChar

    /**
     * lookingAtSpace
     * 
     * @param consume 
     * 
     * @return 
     */
    public boolean lookingAtSpace(boolean consume)
        throws IOException {
        return false;
    } // lookingAtSpace

    /**
     * scanName
     * 
     * @param name 
     * 
     * @return 
     */
    public boolean scanName(XMLString name)
        throws IOException {
        return false;
    } // scanName

    /**
     * scanQName
     * 
     * @param prefix 
     * @param localpart 
     * @param rawname 
     * 
     * @return 
     */
    public boolean scanQName(XMLString prefix, XMLString localpart, XMLString rawname)
        throws IOException {
        return false;
    } // scanQName

    /**
     * scanToChar
     * 
     * @param c 
     * @param text 
     * 
     * @return 
     */
    public boolean scanToChar(char c, XMLString text)
        throws IOException {
        return false;
    } // scanToChar

    /**
     * scanContent
     * 
     * @param content 
     * 
     * @return 
     */
    public boolean scanContent(XMLString content)
        throws IOException {
        return false;
    } // scanContent

    /**
     * scanAttContent
     * 
     * @param quote 
     * @param content 
     * 
     * @return 
     */
    public short scanAttContent(char quote, XMLString content)
        throws IOException {
        return -1;
    } // scanAttContent

    /**
     * scanCharRef
     * 
     * @param hexadecimal 
     * 
     * @return 
     */
    public int scanCharRef(boolean hexadecimal)
        throws IOException {
        return -1;
    } // scanCharRef

    /**
     * skipToChar
     * 
     * @param c 
     * @param consume 
     * 
     * @return 
     */
    public boolean skipToChar(char c, boolean consume)
        throws IOException {
        return false;
    } // skipToChar

    /**
     * skipSpaces
     * 
     * @return 
     */
    public boolean skipSpaces()
        throws IOException {
        return false;
    } // skipSpaces

    /**
     * skipString
     * 
     * @param string 
     * 
     * @return 
     */
    public boolean skipString(char[] string)
        throws IOException {
        return false;
    } // skipString

    /**
     * close
     */
    public void close()
        throws IOException {
    } // close

    //
    // Locator methods
    //

    /**
     * getPublicId
     * 
     * @return 
     */
    public String getPublicId() {
        return null;
    } // getPublicId

    /**
     * getSystemId
     * 
     * @return 
     */
    public String getSystemId() {
        return null;
    } // getSystemId

    /**
     * getLineNumber
     * 
     * @return 
     */
    public int getLineNumber() {
        return -1;
    } // getLineNumber

    /**
     * getColumnNumber
     * 
     * @return 
     */
    public int getColumnNumber() {
        return -1;
    } // getColumnNumber

} // class XMLEntityReader
