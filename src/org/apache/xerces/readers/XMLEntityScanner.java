/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.readers;

import java.io.IOException;
import org.apache.xerces.framework.XMLString;
import org.apache.xerces.utils.QName;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import java.io.Reader;
import java.util.Vector;

/**
 * @author Stubs generated by DesignDoc on Mon Sep 18 18:23:16 PDT 2000
 * @version $Id$
 */
public class XMLEntityScanner
implements Locator {

    //
    // Data
    //

    /** fEntityHandler */
    protected XMLEntityHandler fEntityHandler;

    /** fInputSource */
    protected InputSource fInputSource;

    /** fLineNumber */
    protected int fLineNumber;

    /** fColumnNumber */
    protected int fColumnNumber;

    /** fBytePosition */
    protected long fBytePosition;

    /** fCharPosition */
    protected long fCharPosition;

    /** Reader fields ....  */

    private   Reader    fReader;
    private   char[]    fData;
    private   int       fLength;
    private   final int BUFFERSIZE = 1024;
    private   boolean   fReadBuffer = true;

    //
    // Constructors
    //

    /**
     * 
     */
    public XMLEntityScanner() {
        this.fData = new char[BUFFERSIZE];
    }

    //
    // Methods
    //

    /**
     * setEntityHandler
     * 
     * @param entityHandler 
     */
    public void setEntityHandler(XMLEntityHandler entityHandler) {
        this.fEntityHandler = entityHandler;
    } // setEntityHandler

    /**
     * getBytePosition
     * 
     * @return 
     */
    public long getBytePosition() {
        return this.fBytePosition;
    } // getBytePosition

    /**
     * getCharPosition
     * 
     * @return 
     */
    public long getCharPosition() {
        return this.fCharPosition;
    } // getCharPosition



    /**
     * peekChar
     * 
     * @return 
     */
    public char peekChar()
    throws IOException {
        if ( fReadBuffer == true ) {
            readBuffer();
        }
        return this.fData[ (int) fCharPosition];//return char  

    } // peekChar

    /**
     * scanChar
     * 
     * @return 
     */
    public char scanChar()
    throws IOException {
        if ( fReadBuffer == true ) {
            readBuffer();
        }
        return this.fData[ (int) fCharPosition++];//return char and advance
    } // scanChar

    /**
     * scanNmtoken
     * 
     * @return 
     */
    public String scanNmtoken()
    throws IOException {
        if ( fReadBuffer == true ) {
            readBuffer();
        }

        return null;
    } // scanNmtoken

    /**
     * scanName
     * 
     * @return 
     */
    public String scanName()
    throws IOException {

        if ( fReadBuffer == true ) {
            readBuffer();
        }

        return null;
    } // scanName

    /**
     * scanQName
     * 
     * @param qname 
     */
    public void scanQName(QName qname)
    throws IOException {

        if ( fReadBuffer == true ) {
            readBuffer();
        }


    } // scanQName

    /**
     * scanContent
     * 
     * @param content 
     */
    public void scanContent(XMLString content)
    throws IOException {

        if ( fReadBuffer == true ) {
            readBuffer();
        }

    } // scanContent


    /**
     * scanAttContent
     * 
     * @param quote
     * @param content 
     */
    public boolean scanAttContent(int quote, XMLString content)
    throws IOException {

        if ( fReadBuffer == true ) {
            readBuffer();
        }

        return false;
    } // scanAttContent

    /**
     * skipSpaces
     */
    public void skipSpaces() {
        try {
            if ( fReadBuffer == true ) {
                readBuffer();
            }
        } catch ( IOException ex) {

            ex.printStackTrace();
        }
    } // skipSpaces

    /**
     * skipString
     */
    public void skipString() {
        try {
            if ( fReadBuffer == true ) {
                readBuffer();
            }
        } catch ( IOException ex) {
            ex.printStackTrace();
        }
    } // skipString

    //
    // Locator methods
    //

    /**
     * getPublicId
     * 
     * @return 
     */
    public String getPublicId() {
        return null;
    } // getPublicId

    /**
     * getSystemId
     * 
     * @return 
     */
    public String getSystemId() {
        return null;
    } // getSystemId

    /**
     * getLineNumber
     * 
     * @return 
     */
    public int getLineNumber() {
        return this.getLineNumber();
    } // getLineNumber

    /**
     * getColumnNumber
     * 
     * @return 
     */
    public int getColumnNumber() {
        return this.getColumnNumber();
    } // getColumnNumber

    private void readBuffer() throws IOException {
        if ( fReader == null )
            fReader = this.fInputSource.getCharacterStream();//Get Character reader.

        int charRead  = fReader.read( this.fData );
        fLength      += charRead; 
        fReadBuffer   = false;//So we dont have to read until pos to be read is past  fLength
    }


} // class XMLEntityScanner
