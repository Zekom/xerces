/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.readers;

import java.io.IOException;
import org.apache.xerces.framework.XMLString;
import org.apache.xerces.utils.QName;
import org.apache.xerces.utils.XMLChar;
import org.apache.xerces.utils.SymbolTable;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import java.io.Reader;
import java.io.PushbackReader;
import java.util.Vector;

/**
 * @author Stubs generated by DesignDoc on Mon Sep 18 18:23:16 PDT 2000
 * @version $Id$
 */
public class XMLEntityScanner
implements Locator {

    //
    // Data
    //

    /** fEntityHandler */
    protected XMLEntityHandler fEntityHandler;

    protected SymbolTable      fSymbolTable;

    /** fInputSource */
    protected InputSource fInputSource;

    /** fLineNumber */
    protected int fLineNumber;

    /** fColumnNumber */
    protected int fColumnNumber;

    /** fBytePosition */
    protected long fBytePosition;

    /** fCharPosition */
    protected long fCharPosition;

    /** Reader fields ....  */

    private   PushbackReader    fPushbackReader;



    //
    // Constructors
    //

    /**
     * 
     */
    public XMLEntityScanner() {

    }

    //
    // Methods
    //

    /**
     * setEntityHandler
     * 
     * @param entityHandler 
     */
    public void setEntityHandler(XMLEntityHandler entityHandler) {
        this.fEntityHandler = entityHandler;
    } // setEntityHandler

    /**
     * getBytePosition
     * 
     * @return 
     */
    public long getBytePosition() {
        return this.fBytePosition;
    } // getBytePosition

    /**
     * getCharPosition
     * 
     * @return 
     */
    public long getCharPosition() {
        return this.fCharPosition;
    } // getCharPosition



    /**
     * peekChar
     * 
     * @return 
     */
    public int peekChar()
    throws IOException {
        int charToReturn;

        charToReturn = this.fPushbackReader.read();
        this.fPushbackReader.unread(charToReturn );//pushback character
        if (XMLChar.isValid( charToReturn ) ) {
            return charToReturn;
        } else {
            return -1;
        }
    } // peekChar

    /**
     * scanChar
     * 
     * @return 
     */
    public int scanChar()
    throws IOException {
        int charToReturn;

        charToReturn = this.fPushbackReader.read();//consume character
        if (XMLChar.isValid( charToReturn ) ) {
            return charToReturn;
        } else {
            return -1;
        }
    } // scanChar

    /**
     * scanNmtoken
     * [7]  Nmtoken ::=  (NameChar)+ 
     * 
     * @return           String containing Nmtoken
     * @exception IOException
     */
    public String scanNmtoken()
    throws IOException {
        int charValue;
        StringBuffer  buffer = new StringBuffer();
        while ( XMLChar.isName( charValue = this.fPushbackReader.read() ) == true ) {
            buffer.append( (char) (charValue & 0xffff ) );
            fCharPosition++;
        }
        return buffer.toString();
    } // scanNmtoken

    /**
     * scanName
     * [5]  Name ::=  (Letter | '_' | ':') (NameChar)* 
     * 
     * @return 
     * @exception IOException
     */
    public String scanName()
    throws IOException {
        int charValue;
        StringBuffer  buffer = new StringBuffer();
        if ( XMLChar.isNameStart( charValue = this.fPushbackReader.read() )== true) {
            buffer.append( (char) (charValue & 0xffff ) );
            fCharPosition++;
        } else {
            return null;//Did not find a NameStartChar 
        }
        while ( XMLChar.isName( charValue = this.fPushbackReader.read() ) == true ) {
            buffer.append( (char) (charValue & 0xffff ) );
            fCharPosition++;
        }
        return buffer.toString();
    } // scanName

    /**
     * scanQName
     * 
     * 6]  QName ::=  (Prefix ':')? LocalPart 
     * [7]  Prefix ::=  NCName 
     * [8]  LocalPart ::=  NCName 
     * [1]  NSAttName ::=  PrefixedAttName 
     *    | DefaultAttName 
     * [2]  PrefixedAttName ::=  'xmlns:' NCName [  NSC: Leading "XML" ] 
     * [3]  DefaultAttName ::=  'xmlns' 
     * [4]  NCName ::=  (Letter | '_') (NCNameChar)* /*  An XML Name, minus the ":" 
     * [5]  NCNameChar ::=  Letter | Digit | '.' | '-' | '_' | CombiningChar | Extender 
     * 
     * @param qname
     * @exception IOException
     */
    public void scanQName(QName qname)
    throws IOException {
        int           charValue;
        StringBuffer  buffer = new StringBuffer();

        charValue = this.fPushbackReader.read();
        fCharPosition++;

        if ( XMLChar.isNameStart( charValue) == false ) {
            qname.clear();
            return;
        }
        if ( charValue  == ':' ) {
            qname.clear();
            return;
        }

        buffer.append( (char) (charValue & 0xffff ) );
        while ( true ) {
            charValue = this.fPushbackReader.read();
            fCharPosition++;

            if ( XMLChar.isName( charValue) == false ) {
                this.fPushbackReader.unread( charValue );
                fCharPosition--;
                break;
            }
            buffer.append( (char) (charValue & 0xffff ) );
        }

        String strQname = buffer.toString();
        int length      = strQname.length();
        int prefixIndex = strQname.indexOf(':');
        qname.clear();
        qname.rawname   = strQname;
        if ( prefixIndex != -1 ) {
            qname.prefix    = strQname.substring(0, prefixIndex-1 );
            qname.localpart = strQname.substring(prefixIndex+1, length );
        }
        return;
    } // scanQName

    /**
     * scanContent
     * 
     * @param content 
     */
    public boolean scanContent(XMLString content)
    throws IOException {

    return false;
    } // scanContent


    /**
     * scanAttContent
     * 
     * @param quote
     * @param content 
     */
    public boolean scanAttContent(int quote, XMLString content)
    throws IOException {


        return false;
    } // scanAttContent

    public boolean scanData( String delimiter, XMLString content ) throws IOException {
        return false;
    }



    /**
     * skipSpaces
     * [3]  S ::=  (#x20 | #x9 | #xD | #xA)+ 
     * 
     * 
     */
    public void skipSpaces() throws IOException {
        while (  XMLChar.isSpace( this.fPushbackReader.read() ) == true ) {
            fCharPosition++;
        }
    } // skipSpaces




    /**
     * skipString -  
     */
    public boolean skipString(String s) throws IOException {
        int     charValue;
        char[]  scanStringBuffer = s.toCharArray();

        for( int i = 0; i< s.length(); i++ ) {
            charValue = this.fPushbackReader.read();
            fCharPosition++;
            if( charValue != scanStringBuffer[i])
                return false;
        }
        return true;
    } // skipString

    //
    // Locator methods
    //

    /**
     * getPublicId
     * 
     * @return 
     */
    public String getPublicId() {
        return null;
    } // getPublicId

    /**
     * getSystemId
     * 
     * @return 
     */
    public String getSystemId() {
        return null;
    } // getSystemId

    /**
     * getLineNumber
     * 
     * @return 
     */
    public int getLineNumber() {
        return this.getLineNumber();
    } // getLineNumber

    /**
     * getColumnNumber
     * 
     * @return 
     */
    public int getColumnNumber() {
        return this.getColumnNumber();
    } // getColumnNumber

    protected void setXMLEntityReader(){
        Reader inSource =this.fInputSource.getCharacterStream();
        if ( inSource != null  ) {
            fPushbackReader = new PushbackReader(inSource);//One character reader
            
        }
    }


} // class XMLEntityScanner
