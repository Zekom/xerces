/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.utils;

/**
 * Convenience class for keeping track of namespace information. This
 * class allows the user to bind namespace URIs to qname prefixes
 * that relates to the namespace depth. New namespace bindings at
 * increasing depths take precedence, when queried, over earlier
 * bindings. Namespace bindings are then popped off of the stack as 
 * the depth decreases below the depth where the namespace prefix 
 * was bound.
 * <p>
 * To be used correctly, the strings must be identical references for
 * equal strings. Within the parser, these values are considered symbols
 * and should always be retrieved from the <code>SymbolTable</code>.
 *
 * @see SymbolTable
 *
 * @author Glenn Marcy
 * @author Stubs generated by DesignDoc on Wed Jun 07 11:58:44 PDT 2000
 * @author Andy Clark
 *
 * @version $Id$
 */
public class NamespaceScope {

    //
    // Data
    //

    /** The namespace depth. */
    protected int fDepth;

    /** The namespace mappings. */
    private Bindings[] fMappings = new Bindings[8];

    //
    // Constructors
    //

    /** Constructs a namespace scope. */
    public NamespaceScope() {}

    //
    // Public methods
    //

    /** Increases the namespace depth. */
    public void increaseDepth() {
        fDepth++;
        if (fDepth == fMappings.length) {
            Bindings[] newMappings = new Bindings[fDepth + 8];
            System.arraycopy(fMappings, 0, newMappings, 0, fDepth);
            fMappings = newMappings;
        }
        if (fMappings[fDepth] == null)
            fMappings[fDepth] = new Bindings();
    }

    /** Decreases the namespace depth. */
    public void decreaseDepth() {
        fDepth--;
    }

    /**
     * Sets the namespace URI for the specified prefix.
     * 
     * @param prefix The namespace prefix.
     * @param uri    The namespace URI.
     */
    public void setURIForPrefix(String prefix, String uri) {

        // check length
        Bindings bindings = fMappings[fDepth];
        int offset = bindings.offset;
        if (offset == bindings.info.length) {
            String[] newInfo = new String[offset + 8];
            System.arraycopy(bindings.info, 0, newInfo, 0, offset);
            bindings.info = newInfo;
        }

        // set information
        bindings.info[offset++] = prefix;
        bindings.info[offset++] = uri;
        bindings.offset = offset;

    } // setURIForPrefix(String,String)

    /**
     * Returns the namespace URI that is bound to the specified prefix,
     * or <code>null</code> if no such binding exists.
     * 
     * @param prefix The namespace prefix to search for.
     */
    public String getURIForPrefix(String prefix) {

        // search for binding
        for (int depth = fDepth; depth >= 0; depth--) {
            Bindings bindings = fMappings[depth];
            int offset = bindings.offset;
            for (int i = 1; i < offset; i += 2) {
                if (prefix == bindings.info[i]) {
                    return bindings.info[i + 1];
                }
            }
        }

        // not found
        return null;

    } // getURIForPrefix(String):String

    //
    // Classes
    //

    /**
     * This class represents the namespace bindings at a particular depth.
     */
    protected static final class Bindings {

        //
        // Data
        //

        /** Offset to the next available binding slot. */
        public int offset = 0;

        /** The binding information. */
        public String[] info = new String[8];

        //
        // Constructors
        //

        /** Default constructor. */
        public Bindings() {}

    } // class Bindings

} // class NamespaceScope
